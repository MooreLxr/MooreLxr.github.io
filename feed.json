{
    "version": "https://jsonfeed.org/version/1",
    "title": "行到水穷处，坐看云起时",
    "subtitle": "=^-^=",
    "icon": "https://moorelxr.github.io/images/favicon.ico",
    "description": "海的尽头是什么？",
    "home_page_url": "https://MooreLxr.github.io",
    "items": [
        {
            "id": "https://moorelxr.github.io/el-table/",
            "url": "https://moorelxr.github.io/el-table/",
            "title": "el-table 实现多级表头、合并行、合并表头、表头文字换行",
            "date_published": "2024-10-08T08:48:30.000Z",
            "content_html": "<p>后台项目中经常会出现复杂表格的使用，以下列举几个常见表格的实现</p>\n<h2 id=\"一-多级表头\"><a class=\"anchor\" href=\"#一-多级表头\">#</a> 一、多级表头</h2>\n<pre><code>&lt;el-table\n  :data=&quot;tableData&quot;\n  border\n  style=&quot;width: 100%;&quot;\n  :cell-style=&quot;&#123; 'text-align': 'center' &#125;&quot;\n  :header-cell-style=&quot;&#123; 'text-align': 'center' &#125;&quot;\n&gt;\n    &lt;el-table-column \n      v-for=&quot;(col, i) in tableCols&quot;\n      :label=&quot;col.label&quot;\n      :prop=&quot;col.prop&quot;\n      :key=&quot;i&quot;\n      :width=&quot;col.width&quot;\n      :show-overflow-tooltip=&quot;col.showOverflowTooltip&quot;\n      :formatter=&quot;col.formatter &amp;&amp; col.formatter&quot;\n    &gt;\n      &lt;template v-if=&quot;col.children&quot;&gt;\n        &lt;el-table-column \n          v-for=&quot;(subCol, j) in col.children&quot;\n          :label=&quot;subCol.label&quot;\n          :prop=&quot;subCol.prop&quot;\n          :key=&quot;j&quot;\n          :formatter=&quot;subCol.formatter &amp;&amp; subCol.formatter&quot;\n          :class-name=&quot;col.className&quot;\n          :width=&quot;subCol.width&quot;\n        &gt;\n          &lt;template v-if=&quot;subCol.children&quot;&gt;\n            &lt;el-table-column \n              v-for=&quot;(item, h) in subCol.children&quot;\n              :label=&quot;item.label&quot;\n              :prop=&quot;item.prop&quot;\n              :key=&quot;h&quot;\n              :formatter=&quot;item.formatter &amp;&amp; item.formatter&quot;\n              :class-name=&quot;item.className&quot;\n              :width=&quot;item.width&quot;\n            &gt;&lt;/el-table-column&gt;\n          &lt;/template&gt;\n        &lt;/el-table-column&gt;\n      &lt;/template&gt;\n  &lt;/el-table-column&gt;\n&lt;/el-table&gt;\n</code></pre>\n<pre><code>&lt;script&gt;\nexport default &#123;\n  name: 'complex-table',\n  data() &#123;\n    return &#123;\n      tableCols: [\n        &#123; label: '日期', prop: 'date', width: 150, rowspan: true &#125;,\n        &#123;\n          label: '配送信息',\n          prop: 'shipingInfo',\n          rowspan: true,\n          children: [\n            &#123; label: '姓名', prop: 'name', rowspan: true &#125;,\n            &#123;\n              label: '地址',\n              prop: 'addr',\n              rowspan: false,\n              children: [\n                &#123; label: '省份', prop: 'province', rowspan: false &#125;,\n                &#123; label: '市区', prop: 'city', rowspan: false &#125;,\n                &#123; label: '地址', prop: 'address', rowspan: false &#125;\n              ]\n            &#125;\n          ]\n        &#125;\n      ],\n      tableData: [\n        &#123; date: '2016-05-03', name: '王小虎', province: '上海', city: '普陀区', address: '上海市普陀区金沙江路 1518 弄'&#125;,\n        &#123; date: '2016-05-02', name: '王小虎', province: '上海', city: '普陀区', address: '上海市普陀区金沙江路 1518 弄'&#125;,\n        &#123; date: '2016-05-04', name: '王晓六', province: '江西', city: '普陀区', address: '上海市普陀区金沙江路 1518 弄'&#125;,\n        &#123; date: '2016-05-01', name: '王晓六', province: '江西', city: '普陀区', address: '上海市普陀区金沙江路 1518 弄'&#125;,\n        &#123; date: '2016-05-08', name: '小海', province: '江西', city: '普陀区', address: '上海市普陀区金沙江路 1518 弄'&#125;,\n        &#123; date: '2016-05-06', name: '笑笑', province: '福建', city: '普陀区', address: '上海市普陀区金沙江路 1518 弄'&#125;,\n        &#123; date: '2016-05-07', name: '筱筱', province: '福建', city: '普陀区', address: '上海市普陀区金沙江路 1518 弄'&#125;\n      ]\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n</code></pre>\n<p>展示效果：<br />\n<img data-src=\"./1.png\" alt=\"Alt text\" /></p>\n<h2 id=\"二-合并行\"><a class=\"anchor\" href=\"#二-合并行\">#</a> 二、合并行</h2>\n<pre><code>&lt;el-table \n  :data=&quot;tableData&quot;\n  border\n  :span-method=&quot;objectSpanMethod&quot;\n&gt;\n  &lt;el-table-column prop=&quot;weekday1&quot; label=&quot;周一&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday2&quot; label=&quot;周二&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday3&quot; label=&quot;周三&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday4&quot; label=&quot;周四&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday5&quot; label=&quot;周五&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday6&quot; label=&quot;周六&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday7&quot; label=&quot;周日&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n&lt;/el-table&gt;\n</code></pre>\n<pre><code>&lt;script&gt;\nexport default &#123;\n  data() &#123;\n    return &#123;\n      tableData: [\n        &#123;\n          rotaId: 'xxx-1',\n          rotaName: '值班表名1',\n          dutyTypeId: &quot;type0001&quot;,\n          dutyTypeName: &quot;值班类型1&quot;,\n          '2024-09-16': [],\n          '2024-09-17': [],\n          '2024-09-18': [],\n          '2024-09-19': [],\n          '2024-09-20': [],\n          '2024-09-21': [],\n          '2024-09-22': []\n        &#125;,\n        &#123;\n          rotaId: 'xxx-1',\n          rotaName: '值班表名1',\n          dutyTypeId: &quot;type0002&quot;,\n          dutyTypeName: &quot;值班类型2&quot;,\n          '2024-09-16': [],\n          '2024-09-17': [],\n          '2024-09-18': [],\n          '2024-09-19': [],\n          '2024-09-20': [],\n          '2024-09-21': [],\n          '2024-09-22': []\n        &#125;,\n        &#123;\n          rotaId: 'xxx-2',\n          rotaName: '值班表名2',\n          dutyTypeId: &quot;type0003&quot;,\n          dutyTypeName: &quot;值班类型3&quot;,\n          '2024-09-16': [],\n          '2024-09-17': [],\n          '2024-09-18': [],\n          '2024-09-19': [],\n          '2024-09-20': [],\n          '2024-09-21': [],\n          '2024-09-22': []\n        &#125;\n      ]\n    &#125;\n  &#125;,\n  methods: &#123;\n    // 行合并方法\n    objectSpanMethod (&#123; row, column, rowIndex, columnIndex &#125;) &#123;\n      const dataProvider = this.tableData\n      const cellValue = row[column.property]\n      \n      if (cellValue || cellValue===0) &#123;\n        let prevRow = dataProvider[rowIndex - 1] // 上一条数据\n        let nextRow = dataProvider[rowIndex + 1] // 下一条数据\n        // 当上一条数据等于下一条数据\n        if (prevRow &amp;&amp; prevRow[column.property] === cellValue) &#123;\n          return &#123; rowspan: 0, colspan: 0 &#125;\n        &#125; else &#123;\n          let rowspan = 1\n          while (nextRow &amp;&amp; nextRow[column.property] === cellValue) &#123;\n            rowspan++\n            nextRow = dataProvider[rowspan + rowIndex]\n          &#125;\n          if (rowspan &gt; 1) return &#123; rowspan, colspan: 1 &#125;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n</code></pre>\n<p>展示效果：<br />\n<img data-src=\"./2.png\" alt=\"Alt text\" /></p>\n<h2 id=\"三-合并表头\"><a class=\"anchor\" href=\"#三-合并表头\">#</a> 三、合并表头</h2>\n<pre><code>&lt;el-table\n  :data=&quot;tableData&quot;\n  :span-method=&quot;objectSpanMethod&quot;\n  :header-cell-style=&quot;headRowStyle&quot;\n  height=&quot;calc(100% - 90px)&quot;\n  border\n&gt;\n  &lt;!-- 合并前两列的表头 --&gt;\n  &lt;el-table-column align=&quot;center&quot; label=&quot;值班信息&quot;&gt;\n    &lt;el-table-column prop=&quot;rotaName&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n    &lt;el-table-column prop=&quot;dutyTypeName&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday1&quot; label=&quot;周一&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday2&quot; label=&quot;周二&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday3&quot; label=&quot;周三&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday4&quot; label=&quot;周四&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday5&quot; label=&quot;周五&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday6&quot; label=&quot;周六&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday7&quot; label=&quot;周日&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n&lt;/el-table&gt;\n</code></pre>\n<pre><code>// 表头合并的方法\nheadRowStyle(&#123; row, colunm, rowIndex, columnIndex &#125;) &#123;\n  if (rowIndex === 1) &#123;\n    //这里为了是将第二列的表头隐藏，就形成了合并表头的效果\n    return &#123; display: 'none' &#125;\n  &#125;\n  return &quot;background:#f5f7fa&quot;\n&#125;,\n</code></pre>\n<p>展示效果：<br />\n<img data-src=\"./3.png\" alt=\"Alt text\" /></p>\n<h2 id=\"四-表头文字换行\"><a class=\"anchor\" href=\"#四-表头文字换行\">#</a> 四、表头文字换行</h2>\n<pre><code>&lt;el-table\n  :data=&quot;tableData&quot;\n  height=&quot;calc(100% - 90px)&quot;\n  border\n&gt;\n &lt;!-- 加上\\n可实现换行 --&gt;\n  &lt;el-table-column prop=&quot;weekday1&quot; label=&quot;周一\\n09-16&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday2&quot; label=&quot;周二\\n09-17&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday3&quot; label=&quot;周三\\n09-18&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday4&quot; label=&quot;周四\\n09-19&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday5&quot; label=&quot;周五\\n09-20&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday6&quot; label=&quot;周六\\n09-21&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n  &lt;el-table-column prop=&quot;weekday7&quot; label=&quot;周日\\n09-22&quot; width=&quot;180&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n&lt;/el-table&gt;\n</code></pre>\n<pre><code>/*表头换行 加这段css代码*/\n::v-deep .el-table th.el-table__cell &gt; .cell &#123;\n  white-space: pre;\n&#125;\n</code></pre>\n<p>展示效果：<br />\n<img data-src=\"./4.png\" alt=\"Alt text\" /></p>\n",
            "tags": [
                "element-ui"
            ]
        },
        {
            "id": "https://moorelxr.github.io/redis/",
            "url": "https://moorelxr.github.io/redis/",
            "title": "redis",
            "date_published": "2024-05-24T08:56:19.000Z",
            "content_html": "<h2 id=\"下载docker\"><a class=\"anchor\" href=\"#下载docker\">#</a> 下载 docker</h2>\n<p>先下载 docker desktop，用来跑 redis</p>\n<p>docker desktop<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9wcm9kdWN0cy9kb2NrZXItZGVza3RvcC8=\"> 下载地址</span></p>\n<p><img data-src=\"./image.png\" alt=\"alt text\" /></p>\n<p>打开 docker desktop, 使用时需要科学上网，按下图进行配置即可</p>\n<p><img data-src=\"./image2.png\" alt=\"alt text\" /></p>\n<p>在 docker desktop 搜索框搜索 redis，点击 run，把 redis 官方镜像下载并跑起来。</p>\n<p><img data-src=\"./image3.png\" alt=\"alt text\" /></p>\n<p><img data-src=\"./image.png\" alt=\"alt text\" /></p>\n<p>注：他让你填容器的信息:<br />\n <code>端口映射</code> 就是把主机的 6379 端口映射到容器内的 6379 端口，这样就能直接通过本机端口访问容器内的服务了，<br />\n <code>Volumes 指定数据卷</code> 用本机的任意一个目录挂载到容器内的 /data 目录，这样数据就会保存在本机。</p>\n<p><img data-src=\"./image5.png\" alt=\"alt text\" /></p>\n<p>这就是 redis 跑起来后的日志</p>\n<h2 id=\"下载redis-gui工具redisinsight-anotherredisdesktopmanager-选择一个安装即可\"><a class=\"anchor\" href=\"#下载redis-gui工具redisinsight-anotherredisdesktopmanager-选择一个安装即可\">#</a> 下载 redis GUI 工具（RedisInsight、AnotherRedisDesktopManager 选择一个安装即可）</h2>\n<h3 id=\"redisinsight\"><a class=\"anchor\" href=\"#redisinsight\">#</a> RedisInsight</h3>\n<p>它是 redis 官方出的 GUI 工具，redisInsight<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRpcy5pby9pbnNpZ2h0Lw==\"> 下载地址</span></p>\n<p><img data-src=\"./image6.png\" alt=\"alt text\" /></p>\n<p>打开 RedisInsight，连接刚才用 docker 跑的 redis server：</p>\n<p><img data-src=\"./image7.png\" alt=\"alt text\" /></p>\n<p>查看该服务所创建的所有 key<br />\n<img data-src=\"./image8.png\" alt=\"alt text\" /></p>\n<h3 id=\"anotherredisdesktopmanager\"><a class=\"anchor\" href=\"#anotherredisdesktopmanager\">#</a> AnotherRedisDesktopManager</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2psaHgxMjM0NTYvYXJ0aWNsZS9kZXRhaWxzLzEzMjI5NTI4NQ==\">参考</span></p>\n<h2 id=\"nodejs中使用redis\"><a class=\"anchor\" href=\"#nodejs中使用redis\">#</a> node.js 中使用 redis</h2>\n<h3 id=\"创建nest项目\"><a class=\"anchor\" href=\"#创建nest项目\">#</a> 创建 nest 项目</h3>\n<pre><code>npm install g @nestjs/cli\nnest new projectName\n</code></pre>\n<h3 id=\"安装redis-创建service和module\"><a class=\"anchor\" href=\"#安装redis-创建service和module\">#</a> 安装 redis, 创建 service 和 module</h3>\n<pre><code>npm install --save redis\nnest g module redis\nnest g service redis\n</code></pre>\n<p>redis.module 中连接 redis, 并通过 provide 将 redis 传给 redis.service</p>\n<pre><code>import &#123; Module &#125; from '@nestjs/common';\nimport &#123; createClient &#125; from 'redis';\nimport &#123; RedisService &#125; from './redis.service';\n\n@Module(&#123;\n  providers: [\n    RedisService,\n    &#123;\n      provide: 'REDIS_CLIENT',\n      async useFactory() &#123;\n        const client = createClient(&#123;\n          socket: &#123;\n            host: 'localhost',\n            port: 6379\n          &#125;\n        &#125;);\n        await client.connect();\n        return client;\n      &#125;\n    &#125;\n  ],\n  exports: [RedisService]\n&#125;)\nexport class RedisModule &#123;&#125;\n</code></pre>\n<p>然后在 redis.service 中注入 REDIS_CLIENT，并封装一些操作 redis 的方法</p>\n<pre><code>import &#123; Inject, Injectable &#125; from '@nestjs/common';\nimport &#123; RedisClientType &#125; from 'redis';\n\n@Injectable()\nexport class RedisService &#123;\n\n    @Inject('REDIS_CLIENT')\n    private redisClient: RedisClientType;\n\n    // 定义方法\n    async getPositionsList(key: string) &#123;\n        ...\n    &#125;\n&#125;\n</code></pre>\n<p>app.module.ts 引入 redis.service，即可使用该文件中定义的方法</p>\n<pre><code>import &#123; BadRequestException, Controller, Get, Inject, Query &#125; from '@nestjs/common';\nimport &#123; AppService &#125; from './app.service';\nimport &#123; RedisService &#125; from './redis/redis.service';\n\n@Controller()\nexport class AppController &#123;\n  constructor(private readonly appService: AppService) &#123;&#125;\n\n  @Inject(RedisService)\n  private redisService: RedisService;\n\n  @Get('getPos')\n  async getPos() &#123;\n    try &#123;\n      await this.redisService.getPositionsList('positions');\n    &#125; catch(e) &#123;\n      throw new BadRequestException(e.message);\n    &#125;\n    return &#123;\n      message: '添加成功',\n      statusCode: 200\n    &#125;\n  &#125;\n</code></pre>\n",
            "tags": [
                "redis"
            ]
        },
        {
            "id": "https://moorelxr.github.io/nvm/",
            "url": "https://moorelxr.github.io/nvm/",
            "title": "nvm",
            "date_published": "2024-05-07T07:31:19.000Z",
            "content_html": "<h3 id=\"下载地址\"><a class=\"anchor\" href=\"#下载地址\">#</a> 下载地址：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz\">https://github.com/coreybutler/nvm-windows/releases</span></p>\n<p><img data-src=\"./image.png\" alt=\"alt text\" /></p>\n<p>就正常的傻瓜式安装（注意：如果默认安装在 C 盘，则无需配置环境变量）</p>\n<p>检测安装是否成功：<br />\n<img data-src=\"./version.png\" alt=\"alt text\" /></p>\n<p>正常出现版本号则表示安装成功</p>\n<h3 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量：</h3>\n<p><img data-src=\"./path.png\" alt=\"alt text\" /></p>\n<p>圈出来的地方改成自己安装的对应路径即可</p>\n<h3 id=\"配置镜像源\"><a class=\"anchor\" href=\"#配置镜像源\">#</a> 配置镜像源</h3>\n<p>找到 nvm 文件位置，点开 setting</p>\n<p><img data-src=\"./setting.png\" alt=\"alt text\" /></p>\n<p>输入下面的镜像源</p>\n<pre><code>node_mirror: https://npm.taobao.org/mirrors/node/\nnpm_mirror: https://npm.taobao.org/mirrors/npm/\n</code></pre>\n<h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h3>\n<p>1. 先卸载之前的 node.js<br />\n2. 在刚刚的 nvm 文件位置打开 cmd<br />\n3. 输入以下代码查看 nvm 可安装的 node 版本</p>\n<pre><code>nvm ls                      // 看安装的所有node.js的版本\nnvm list available          // 查显示可以安装的所有node.js的版本\n</code></pre>\n<p>4. 安装所对应的版本</p>\n<pre><code>nvm install 版本号      // 例如：nvm install 14.19.0\n</code></pre>\n<p>5. 切换到安装的版本</p>\n<pre><code>nvm use 版本号           // 切换到使用指定的nodejs版本\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://moorelxr.github.io/el-tree-lazy/",
            "url": "https://moorelxr.github.io/el-tree-lazy/",
            "title": "el-tree懒加载树 手动触发load更新",
            "date_published": "2024-02-19T01:59:37.000Z",
            "content_html": "<p>element-ui el-tree 懒加载树组件，当对树组件进行增删改时需要手动触发 load 更新节点数据，遇到一些问题，特此记录下面三种方法，避免下次踩坑</p>\n<h2 id=\"方法1通过保存currentnode和currentresolve来刷新不推荐\"><a class=\"anchor\" href=\"#方法1通过保存currentnode和currentresolve来刷新不推荐\">#</a> 方法 1：通过保存 currentNode 和 currentResolve 来刷新（不推荐）</h2>\n<pre><code>&lt;template&gt;\n  &lt;el-tree\n    :props=&quot;defaultProps&quot;\n    :load=&quot;loadLazyTree&quot;\n    lazy\n  &gt;&lt;/el-tree&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  data() &#123;\n    return &#123;\n      defaultProps: &#123;\n        label: 'name',\n        children: 'children',\n        isLeaf: (data, node) =&gt; &#123;\n          return !data.hasChild\n        &#125;\n      &#125;,\n    &#125;\n  &#125;,\n  methods: &#123;\n    loadLazyTree(node, resolve) &#123;\n      const isRootNode = node.level === 0 ? true : false\n  \n      // 保存当前展开的节点数据\n      this.currentNode = node\n      this.currentResolve = resolve\n    \n      const sendData = &#123;\n        parentId: isRootNode ? null : node.data.id\n      &#125;\n      getPrepPlanOrganTree(sendData).then(res =&gt; &#123;\n        resolve(res.data)\n      &#125;)\n    &#125;,\n    loadCurrentNode() &#123;\n      this.currentNode.childNodes = []\n      this.loadLazyTree(this.currentNode, this.currentResolve)\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n</code></pre>\n<p>缺点：<br />\nloadLazyTree 只会针对某个节点加载一次数据，下次再展开不重新加载数据，此时保存的 this.currentNode 和 this.currentResolve 与当前点击节点不匹配，这种情况调用节点的刷新当前节点数据就是错的</p>\n<h2 id=\"方法2通过nodeexpand来刷新推荐\"><a class=\"anchor\" href=\"#方法2通过nodeexpand来刷新推荐\">#</a> 方法 2：通过 node.expand () 来刷新（推荐）</h2>\n<pre><code>&lt;template&gt;\n  &lt;el-tree\n    :props=&quot;defaultProps&quot;\n    :load=&quot;loadLazyTree&quot;\n    lazy\n    ref=&quot;tree&quot;\n    @node-click=&quot;handleNodeClick&quot;\n  &gt;&lt;/el-tree&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  data() &#123;\n    return &#123;\n      defaultProps: &#123;\n        label: 'name',\n        children: 'children',\n        isLeaf: (data, node) =&gt; &#123;\n          return !data.hasChild\n        &#125;\n      &#125;,\n      currentNode: null\n    &#125;\n  &#125;,\n  methods: &#123;\n    loadLazyTree(node, resolve) &#123;\n      const isRootNode = node.level === 0 ? true : false\n      const sendData = &#123;\n        parentId: isRootNode ? null : node.data.id\n      &#125;\n      getPrepPlanOrganTree(sendData).then(res =&gt; &#123;\n        resolve(res.data)\n      &#125;)\n    &#125;,\n    // 重载当前节点\n    loadCurrentNode() &#123;\n      let node = this.$refs.tree.getNode(this.currentNode.id) // 获取当前节点\n      node.loaded = false// 设置未进行懒加载状态\n      node.expand()// 重新展开节点就会间接重新触发load达到刷新效果\n    &#125;,\n    // 获取选中的子节点\n    handleNodeClick(data, node) &#123;\n      this.currentNode = node\n      this.$emit('node-click', data)\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n</code></pre>\n<p>该方法不需要缓存 resolve 这个不好拿到的入参，避免调用 loadLazyTree (node, resolve) 函数时传入缓存的 node 和 resolve 不匹配当前点击的节点</p>\n<h2 id=\"方法3通过nodeloaddata来刷新\"><a class=\"anchor\" href=\"#方法3通过nodeloaddata来刷新\">#</a> 方法 3：通过 node.loadData () 来刷新</h2>\n<pre><code>&lt;template&gt;\n  &lt;el-tree\n    :props=&quot;defaultProps&quot;\n    :load=&quot;loadLazyTree&quot;\n    lazy\n    ref=&quot;tree&quot;\n    @node-click=&quot;handleNodeClick&quot;\n  &gt;&lt;/el-tree&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  data() &#123;\n    return &#123;\n      defaultProps: &#123;\n        label: 'name',\n        children: 'children',\n        isLeaf: (data, node) =&gt; &#123;\n          return !data.hasChild\n        &#125;\n      &#125;,\n      currentNode: null\n    &#125;\n  &#125;,\n  methods: &#123;\n    loadLazyTree(node, resolve) &#123;\n      const isRootNode = node.level === 0 ? true : false\n      const sendData = &#123;\n        parentId: isRootNode ? '' : node.data.id\n      &#125;\n      if (isRootNode) &#123;\n        this.rootNode = node\n        this.rootLazyNodeResolve = resolve\n      &#125;\n      getPrepPlanOrganTree(sendData).then(res =&gt; &#123;\n        resolve(res.data)\n      &#125;)\n    &#125;,\n    // 重载当前节点\n    loadCurrentNode() &#123;\n      this.currentNode.loaded = false\n      this.currentNode.childNodes = []\n      this.currentNode.loadData((data) =&gt; &#123;\n        // 懒加载完数据后做一些操作\n      &#125;)\n    &#125;,\n    // 重载当前节点的父节点\n    loadParentNode() &#123;\n      const node = this.$refs.tree.getNode(this.currentNode.id)\n      if (node.parent) &#123;\n        node.parent.loaded = false\n        node.parent.childNodes = []\n        node.parent.loadData() // 刷新父节点数据\n      &#125; else &#123;\n        this.loadRootNode()\n      &#125;\n    &#125;,\n    // 重载根节点\n    loadRootNode() &#123;\n      this.rootNode.childNodes = []\n      this.loadLazyTree(this.rootNode, this.rootLazyNodeResolve)\n    &#125;,\n    // 获取选中的子节点\n    handleNodeClick(data, node) &#123;\n      this.currentNode = node\n      this.$emit('node-click', data)\n    &#125;\n  &#125;\n&#125;\n&lt;/script&gt;\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wZTFkNGQyODEwNGU=\">el-tree 懒加载 load 手动触发 load 更新的三种方法</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGlhbmppbGluZ3F1LmNvbS8xOTA5NjMuaHRtbA==\"> ElementUi Tree 树形控件的使用（增、删）</span></p>\n",
            "tags": [
                "element-ui"
            ]
        },
        {
            "id": "https://moorelxr.github.io/performance-optimize/",
            "url": "https://moorelxr.github.io/performance-optimize/",
            "title": "性能优化",
            "date_published": "2023-07-27T03:52:04.000Z",
            "content_html": "<h1 id=\"性能优化\"><a class=\"anchor\" href=\"#性能优化\">#</a> 性能优化</h1>\n<h2 id=\"1documentcreatedocumentfragment创建文档碎片\"><a class=\"anchor\" href=\"#1documentcreatedocumentfragment创建文档碎片\">#</a> 1.document.createDocumentFragment () 创建文档碎片</h2>\n<h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<p>用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到 DOM 树，文档片段存在于内存中，并不在 DOM 树中，所以将子元素插入到文档片段时不会引起页面回流（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。</p>\n<p>举例：</p>\n<p>当我们需要往 body 中添加大量节点时，按下面这种方式，每次循环都往 body 中添加节点会导致浏览器频繁重排重绘，非常影响性能</p>\n<pre><code>for (let i = 0; i &lt; 500; i++) &#123;\n  let node = document.createElement('span')\n  let iNode = document.createElement('i')\n  node.appendChild(iNode)\n  document.body.appendChild(node)\n&#125;\n</code></pre>\n<p>改进，创建 div 节点，循环创建的节点统一存在这个 div 中，然后再将 div 添加到 body 中，但缺点是要在 body 中多添加了一层 div 包裹，而 document.createDocumentFragment () 就不会产生额外的节点</p>\n<pre><code>let oDiv = document.createElement('div')\nfor (let i = 0; i &lt; 500; i++) &#123;\n  let node = document.createElement('span')\n  let iNode = document.createElement('i')\n  node.appendChild(iNode)\n  oDiv.appendChild(node) // 动态创建的节点统一存在oDiv中\n&#125;\ndocument.body.appendChild(oDiv)\n</code></pre>\n<p>使用 document.createDocumentFragment () 进行优化，这种方式不会产生额外的 DOM 元素</p>\n<pre><code>let fragment = document.createDocumentFragment();\nfor (let i = 0; i &lt; 500; i++) &#123;\n  let node = document.createElement('span')\n  let iNode = document.createElement('i')\n  node.appendChild(iNode)\n  fragment.appendChild(node) // 动态创建的节点统一存在fragment中\n&#125;\ndocument.body.appendChild(fragment)\n</code></pre>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://moorelxr.github.io/mobile-adaption/",
            "url": "https://moorelxr.github.io/mobile-adaption/",
            "title": "移动端适配方案、大屏响应式处理",
            "date_published": "2023-04-03T11:31:09.000Z",
            "content_html": "<h1 id=\"移动端适配\"><a class=\"anchor\" href=\"#移动端适配\">#</a> 移动端适配：</h1>\n<p>在做移动端开发时，为了使移动端的页面在不同的手机上以同样的大小来显示，我们可以将页面的宽度固定，然后获取设备的宽度，可以得到我们之前设定的宽度与设备宽度的比例，再使用 HTML5 新增的 viewport 来对页面进行缩放，并固定不允许用户再重新缩放。</p>\n<p>在 index.html 增加该配置</p>\n<pre><code>&lt;meta\n  name=&quot;viewport&quot;\n  content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no,viewport-fit=cover&quot;\n&gt;\n</code></pre>\n<h2 id=\"rem-适配淘宝和百度方案\"><a class=\"anchor\" href=\"#rem-适配淘宝和百度方案\">#</a> rem 适配 (淘宝和百度方案)</h2>\n<p>计算公式：<br />\n根字体 = （设备视口宽度 * 100） / 设计稿宽度</p>\n<pre><code>&lt;script&gt;\n// 获取布局视口宽度\nconst dpWidth = document.documentElement.clientWidth\n// 计算根字体大小\nconst rootFontSize = (dpWidth * 100) / 375\n// 设置根字体大小\ndocument.documentElement.style.fontSize = rootFontSize + 'px'\n&lt;/script&gt;\n</code></pre>\n<p>设置完根字体大小后，后续所有页面都以 rem 为单位，值为 设计稿的像素值 / 100，例如 14px = 0.14rem，这样在不同设备上都是 0.14rem, 但不同设备的 rem 代表的像素值不同，从而实现适配</p>\n<h2 id=\"vw-适配\"><a class=\"anchor\" href=\"#vw-适配\">#</a> vw 适配</h2>\n<p>它的特点很明显，没有 js 代码，但是兼容性却不好</p>\n<p><img data-src=\"./caniuse.png\" alt=\"Alt text\" /></p>\n<p>vw: 把布局视口分成 100 份，1vw = 1% 的布局视口 = 1% 的视觉视口<br />\n vh: 就是 1% 的视口高度<br />\n用 less 计算</p>\n<pre><code>@basic: 375 / 100vw;\n*&#123;\n  margin: 0;\n  padding: 0;\n&#125;\n.demo&#123;\n  width: (100/@basic);\n  height: (100/@basic);\n  background-color: black;\n&#125;\n</code></pre>\n<h1 id=\"大屏响应式\"><a class=\"anchor\" href=\"#大屏响应式\">#</a> 大屏响应式：</h1>\n<h2 id=\"rem适配\"><a class=\"anchor\" href=\"#rem适配\">#</a> rem 适配</h2>\n<p>通过设置根字体大小 1rem=**px，设置完根字体大小后，后续所有页面都以 rem 为单位，但不同设备的 1rem 代表的像素值不同，从而实现适配</p>\n<pre><code>export default &#123;\n  data() &#123;\n    return &#123;&#125;\n  &#125;,\n  mounted() &#123;\n    this.getRem()\n    window.addEventListener('resize', this.getRem);\n    this.$on('hooK:beforeDestroy', () =&gt; &#123;\n      window.removeEventListener('resize', this.getRem);\n    &#125;)\n  &#125;,\n  methods: &#123;\n    getRem () &#123;\n      const pwidth = 1920 // 设计图大小\n      const prem = 1\n      const html = document.getElementsByTagName('html')[0]\n      const oWidth = window.innerWidth || document.body.clientWidth || document.documentElement.clientWidth // 屏幕大小\n      html.style.fontSize = (oWidth / pwidth) * prem + 'px'\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>缺点：<br />\n大屏使用 rem 耗时，而且对浏览器最小字体不支持</p>\n<h2 id=\"scale缩放实现\"><a class=\"anchor\" href=\"#scale缩放实现\">#</a> scale 缩放实现</h2>\n<p>使用 scale 可以节省百分之九十工作量，但是缺点：<br />\n如果大屏有地图，缩放会导致地图定位有问题，请根据使用场景选择最佳方案</p>\n<p>创建一个组件 SacleBox</p>\n<pre><code>&lt;template&gt;\n &lt;div\n    class=&quot;ScaleBox&quot;\n    ref=&quot;ScaleBox&quot;\n    :style=&quot;&#123;\n      width: width + 'px',\n      height: height + 'px',\n    &#125;&quot;\n  &gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n&lt;script&gt;\nexport default &#123;\n  name: &quot;ScaleBox&quot;,\n  data() &#123;\n    return &#123;\n      width: 1920,\n      height: 1080,\n    &#125;;\n  &#125;,\n  mounted() &#123;\n    this.setScale();\n    window.addEventListener('resize', this.debounce(this.setScale));\n    this.$on('hooK:beforeDestroy', () =&gt; &#123;\n      window.removeEventListener('resize', this.debounce(this.setScale))\n    &#125;)\n  &#125;,\n  methods: &#123;\n    setScale() &#123;\n      // 固定好16：9的宽高比，计算出最合适的缩放比\n      const &#123; width, height &#125; = this;\n      const wh = window.innerHeight / height;\n      const ww = window.innerWidth / width;\n      const scale = ww &lt; wh ? ww : wh;\n      if (this.$refs.ScaleBox) &#123;\n        this.$refs.ScaleBox.style.setProperty(&quot;--scale&quot;, scale);\n      &#125;\n    &#125;,\n    debounce(fn, delay) &#123;\n      const delays = delay || 500;\n      let timer;\n      return function () &#123;\n        const args = arguments;\n        timer &amp;&amp; clearTimeout(timer);\n        timer = setTimeout(() =&gt; &#123;\n          timer = null;\n          fn.apply(this, args);\n        &#125;, delays);\n      &#125;;\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n \n&lt;style lang=&quot;scss&quot;&gt;\n.ScaleBox &#123;\n  --scale: 1;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: scale(var(--scale)) translate(-50%, -50%);\n  transform-origin: 0 0;\n  transition: 0.3s;\n  z-index: 999;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p>大屏引入 ScaleBox 实现缩放</p>\n<pre><code>&lt;template&gt;\n  &lt;scale-box&gt;\n    // 业务代码\n  &lt;/scalebox&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport ScaleBox from '@/components/scale-box/index.vue'\nexport default &#123;\n  name: &quot;home&quot;,\n  components: &#123; ScaleBox &#125;,\n  data () &#123;\n    return &#123;\n\n    &#125;;\n  &#125;,\n&#125;\n&lt;/script&gt;\n</code></pre>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://moorelxr.github.io/tool/",
            "url": "https://moorelxr.github.io/tool/",
            "title": "办公工具合集",
            "date_published": "2023-02-11T10:00:53.000Z",
            "content_html": "<h1 id=\"1前端小工具合集\"><a class=\"anchor\" href=\"#1前端小工具合集\">#</a> 1. 前端小工具合集</h1>\n<h3 id=\"echart-社区\"><a class=\"anchor\" href=\"#echart-社区\">#</a> &gt;&gt;echart 社区</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJ0Lm1hamgudG9wLw==\">http://chart.majh.top/</span></p>\n<p>ps: 各种丰富的 echart 图集效果</p>\n<h3 id=\"渐变色取色工具\"><a class=\"anchor\" href=\"#渐变色取色工具\">#</a> &gt;&gt; 渐变色取色工具</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2JqLjkxam9pbi5jb20vdGlhb3NlLmh0bWw=\">http://bj.91join.com/tiaose.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jc3MuYnFyZGguY29tL2dyYWRpZW50\">https://css.bqrdh.com/gradient</span></p>\n<h3 id=\"box-shadow阴影在线调整\"><a class=\"anchor\" href=\"#box-shadow阴影在线调整\">#</a> &gt;&gt;box-shadow 阴影在线调整</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib3gtc2hhZG93LmRldi8=\">https://box-shadow.dev/</span></p>\n<h3 id=\"兼容性查询\"><a class=\"anchor\" href=\"#兼容性查询\">#</a> &gt;&gt; 兼容性查询</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8=\">https://caniuse.com/</span></p>\n<h3 id=\"代码格式化\"><a class=\"anchor\" href=\"#代码格式化\">#</a> &gt;&gt; 代码格式化</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlYmVhdXRpZnkub3JnLw==\">https://codebeautify.org/</span></p>\n<p>ps: 可以美化和格式化源代码，使其更具易读性，还提供其他附加功能，例如图像转换为 base64 和其他多种功能</p>\n<h1 id=\"2办公工具合集\"><a class=\"anchor\" href=\"#2办公工具合集\">#</a> 2. 办公工具合集</h1>\n<h3 id=\"在线-ps\"><a class=\"anchor\" href=\"#在线-ps\">#</a> &gt;&gt; 在线 ps</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcy5nYW9kaW5nLmNvbS8jLw==\">https://ps.gaoding.com/#/</span></p>\n<h3 id=\"文叔叔在线文件传输工具\"><a class=\"anchor\" href=\"#文叔叔在线文件传输工具\">#</a> &gt;&gt; 文叔叔（在线文件传输工具）</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2Vuc2h1c2h1LmNuLw==\">https://www.wenshushu.cn/</span></p>\n<p>ps: 拿着取件码去取你的文件，跟取快递一样<sup> -</sup></p>\n<h3 id=\"拷贝兔在线文件传输工具\"><a class=\"anchor\" href=\"#拷贝兔在线文件传输工具\">#</a> &gt;&gt; 拷贝兔（在线文件传输工具）</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcC5hbnlrbmV3LmNvbS8=\">https://cp.anyknew.com/</span></p>\n<p>ps: 拿着取件码去取你的文件，跟取快递一样<sup> -</sup></p>\n<h3 id=\"图片处理工具合集\"><a class=\"anchor\" href=\"#图片处理工具合集\">#</a> &gt;&gt; 图片处理工具合集</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWFzdW90dS5jb20v\">https://www.yasuotu.com/</span></p>\n<h3 id=\"视频转换工具合集\"><a class=\"anchor\" href=\"#视频转换工具合集\">#</a> &gt;&gt; 视频转换工具合集</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHAueHVuamllc2hpcGluLmNvbS8=\">https://app.xunjieshipin.com/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb252ZXJ0aW8uY28vemgvbXA0LW1wMy8=\">https://convertio.co/zh/mp4-mp3/</span></p>\n<h3 id=\"文档转换工具\"><a class=\"anchor\" href=\"#文档转换工具\">#</a> &gt;&gt; 文档转换工具</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb252ZXJ0aW8uY28vemgv\">https://convertio.co/zh/</span></p>\n<h3 id=\"图片背景移除\"><a class=\"anchor\" href=\"#图片背景移除\">#</a> &gt;&gt; 图片背景移除</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVtb3ZlLmJnL3po\">https://www.remove.bg/zh</span></p>\n<h3 id=\"免费可定制插图\"><a class=\"anchor\" href=\"#免费可定制插图\">#</a> &gt;&gt; 免费可定制插图</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdG9yeXNldC5jb20v\">https://storyset.com/</span></p>\n<p>ps: 通过 Storyset 我们可以轻松定制、动画化并下载插图，以创建令人难以置信的落地页、应用程序或演示文稿</p>\n<h3 id=\"线上办公资源ui-办公资源\"><a class=\"anchor\" href=\"#线上办公资源ui-办公资源\">#</a> &gt;&gt; 线上办公资源：（UI、办公资源）</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYXYuc2Fua2tpLmNvbS8jL2luZGV4\">https://nav.sankki.com/#/index</span></p>\n<h3 id=\"ai-图像放大器\"><a class=\"anchor\" href=\"#ai-图像放大器\">#</a> &gt;&gt;AI 图像放大器</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWdsYXJnZXIuY29tL3poLXR3\">https://imglarger.com/zh-tw</span></p>\n<h3 id=\"ppt-模板免费下载\"><a class=\"anchor\" href=\"#ppt-模板免费下载\">#</a> &gt;&gt;ppt 模板免费下载：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMnBwdC5jb20vcHB0Lmh0bWw=\">https://www.2ppt.com/ppt.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTFwcHRtb2Jhbi5jb20vZS9zZWFyY2gvcmVzdWx0Lz9zZWFyY2hpZD0yNzgyMA==\">https://www.51pptmoban.com/e/search/result/?searchid=27820</span></p>\n<h3 id=\"云盘资源搜索平台\"><a class=\"anchor\" href=\"#云盘资源搜索平台\">#</a> &gt;&gt; 云盘资源搜索平台</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cHl1bnNvLmNvbS8=\">https://upyunso.com/</span></p>\n<h3 id=\"贵金属价格查询\"><a class=\"anchor\" href=\"#贵金属价格查询\">#</a> &gt;&gt; 贵金属价格查询</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ocS5zbW0uY24vcHJlY2lvdXMtbWV0YWxz\">https://hq.smm.cn/precious-metals</span></p>\n<h1 id=\"3娱乐网站合集\"><a class=\"anchor\" href=\"#3娱乐网站合集\">#</a> 3. 娱乐网站合集</h1>\n<h3 id=\"厂长资源\"><a class=\"anchor\" href=\"#厂长资源\">#</a> &gt;&gt; 厂长资源</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jenp5MDEuY29tLw==\">https://czzy01.com/</span></p>\n<h3 id=\"小众技术\"><a class=\"anchor\" href=\"#小众技术\">#</a> &gt;&gt; 小众技术</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueGlhb3pob25namlzaHUuY29tLw==\">https://www.xiaozhongjishu.com/</span></p>\n<h3 id=\"百度网盘视频播放倍速\"><a class=\"anchor\" href=\"#百度网盘视频播放倍速\">#</a> &gt;&gt; 百度网盘视频播放倍速</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veW5vdGVzaGFyZS9pbmRleC5odG1sP2lkPTBkYmU5YTYwMDMxOTNjNjg5MjZjODlhZDg4ZDk1NTljJmFtcDt0eXBlPW5vdGUmYW1wO190aW1lPTE3MDYwODQxMTM2MDc=\">https://note.youdao.com/ynoteshare/index.html?id=0dbe9a6003193c68926c89ad88d9559c&amp;type=note&amp;_time=1706084113607</span></p>\n<h1 id=\"4找工作合集\"><a class=\"anchor\" href=\"#4找工作合集\">#</a> 4. 找工作合集</h1>\n<h3 id=\"知页简历\"><a class=\"anchor\" href=\"#知页简历\">#</a> &gt;&gt; 知页简历</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpeWVhcHAuY29tLw==\">https://www.zhiyeapp.com/</span></p>\n<p>(ps: 提供免费简历模板、在线编辑)</p>\n<h3 id=\"ai-简历\"><a class=\"anchor\" href=\"#ai-简历\">#</a> &gt;&gt;AI 简历</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2h6aGtlamkuY29tLw==\">https://www.chzhkeji.com/</span></p>\n",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-build-error/",
            "url": "https://moorelxr.github.io/electron-build-error/",
            "title": "electron打包错误",
            "date_published": "2022-10-11T10:05:51.000Z",
            "content_html": "<h1 id=\"electron-打包遇到的问题\"><a class=\"anchor\" href=\"#electron-打包遇到的问题\">#</a> electron 打包遇到的问题</h1>\n<p>内网，内网，内网！！！内网开发的同学看过来～～～</p>\n<h2 id=\"一-网络下载失败\"><a class=\"anchor\" href=\"#一-网络下载失败\">#</a> 一、网络下载失败</h2>\n<p>electron 打包过程中，由于网络原因，下载 github 上的包出错，主要有以下包：</p>\n<h3 id=\"1electron-v1369-win32-x64zip\"><a class=\"anchor\" href=\"#1electron-v1369-win32-x64zip\">#</a> 1.electron-v13.6.9-win32-x64.zip</h3>\n<p><img data-src=\"./%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%991.png\" alt=\"Alt text\" /></p>\n<h3 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uL2VsZWN0cm9uL3JlbGVhc2VzL2Rvd25sb2FkL3YxMy42LjkvZWxlY3Ryb24tdjEzLjYuOS13aW4zMi14NjQuemlw\">https://github.com/electron/electron/releases/download/v13.6.9/electron-v13.6.9-win32-x64.zip</span></p>\n<p>离线下载 electron-v13.6.9-win32-x64.zip，再放到对应目录下:</p>\n<pre><code>windows:C:\\Users\\Administrator\\AppData\\Local\\electron\\Cache\nLinux:~/.cache/electron\nmacOS:~/Library/Caches/electron\n</code></pre>\n<p>如图：<br />\n<img data-src=\"./%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B31.png\" alt=\"Alt text\" /></p>\n<h3 id=\"2wincodesign-2607z\"><a class=\"anchor\" href=\"#2wincodesign-2607z\">#</a> 2.winCodeSign-2.6.0.7z</h3>\n<p><img data-src=\"./%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%992.png\" alt=\"Alt text\" /></p>\n<h3 id=\"解决方案-2\"><a class=\"anchor\" href=\"#解决方案-2\">#</a> 解决方案：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvd2luQ29kZVNpZ24tMi42LjAvd2luQ29kZVNpZ24tMi42LjAuN3o=\">https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.6.0/winCodeSign-2.6.0.7z</span></p>\n<p>离线下载 winCodeSign-2.6.0.7z，再放到对应目录下:</p>\n<pre><code>windows:C:\\Users\\Administrator\\AppData\\Local\\electron-builder\\Cache\n</code></pre>\n<p>如图：<br />\n<img data-src=\"./%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B32.png\" alt=\"Alt text\" /></p>\n<h3 id=\"3nsis-30417z\"><a class=\"anchor\" href=\"#3nsis-30417z\">#</a> 3.nsis-3.0.4.1.7z</h3>\n<p><img data-src=\"./%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%993.png\" alt=\"Alt text\" /></p>\n<h3 id=\"解决方案-3\"><a class=\"anchor\" href=\"#解决方案-3\">#</a> 解决方案：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvbnNpcy0zLjAuNC4xL25zaXMtMy4wLjQuMS43eg==\">https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z</span></p>\n<p>离线下载 nsis-3.0.4.1.7z，再放到对应目录下:</p>\n<pre><code>windows:C:\\Users\\Administrator\\AppData\\Local\\electron-builder\\Cache\\nsis\n</code></pre>\n<p>如图：<br />\n<img data-src=\"./%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B33.png\" alt=\"Alt text\" /></p>\n<h3 id=\"4nsis-resources-3417z\"><a class=\"anchor\" href=\"#4nsis-resources-3417z\">#</a> 4.nsis-resources-3.4.1.7z</h3>\n<p><img data-src=\"./%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%994.png\" alt=\"Alt text\" /></p>\n<h3 id=\"解决方案-4\"><a class=\"anchor\" href=\"#解决方案-4\">#</a> 解决方案：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvbnNpcy1yZXNvdXJjZXMtMy40LjEvbnNpcy1yZXNvdXJjZXMtMy40LjEuN3o=\">https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z</span></p>\n<p>离线下载 nsis-resources-3.4.1.7z，再放到对应目录下:</p>\n<pre><code>windows:C:\\Users\\Administrator\\AppData\\Local\\electron-builder\\Cache\\nsis\n</code></pre>\n<p>如图：<br />\n<img data-src=\"./%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B34.png\" alt=\"Alt text\" /></p>\n<p>再次打包，成功了！！！</p>\n<h2 id=\"二-国产操作系统通信-uos-arm64-版\"><a class=\"anchor\" href=\"#二-国产操作系统通信-uos-arm64-版\">#</a> 二、国产操作系统（通信 UOS arm64 版）</h2>\n<p>打包流程参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdHV5aWxlMDA2L3AvMTYzOTk3NDUuaHRtbA==\">linux 打包</span></p>\n<h3 id=\"1-arm64-适配\"><a class=\"anchor\" href=\"#1-arm64-适配\">#</a> 1. arm64 适配:</h3>\n<p>安装完 node.js、vscode 等必要的开发环境后，在统信 UOS arm64 位下打包 electron 项目依然会报错<br />\n<img data-src=\"./linux/arm64.png\" alt=\"Alt text\" /></p>\n<p>从报错信息可以看到，electron 在 linux 下使用 fpm 进行打包，然而下载的是 x86 的包，而不是 arm64 架构的包</p>\n<h4 id=\"解决方案-5\"><a class=\"anchor\" href=\"#解决方案-5\">#</a> 解决方案：</h4>\n<p>在 x86 上交叉编译出 arm64 的包，重新打包一下成功了！！！</p>\n<p>内网开发真的太痛苦了 😭😭😭</p>\n",
            "tags": [
                "electron"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-tray/",
            "url": "https://moorelxr.github.io/electron-tray/",
            "title": "electron系统托盘",
            "date_published": "2022-10-11T10:02:35.000Z",
            "content_html": "<h1 id=\"electron-创建系统托盘\"><a class=\"anchor\" href=\"#electron-创建系统托盘\">#</a> electron 创建系统托盘</h1>\n<p>主进程（background.js）：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain, Tray, Menu, nativeImage &#125; from 'electron'\n\nlet win\nfunction createWindow() &#123;\n  // 创建窗口\n  ...\n  createTrayIcon()\n&#125;\n\n// 创建系统托盘\nlet tray\nfunction createTrayIcon() &#123;\n  const iconPath = nativeImage.createFromPath(path.join(__static, 'icons/cloud_client.png')) // __static指向public文件夹\n  tray = new Tray(iconPath)\n  const contextMenu = Menu.buildFromTemplate([\n    &#123;\n      label: '产品介绍',\n      click: () =&gt; &#123;\n        dialog.showMessageBoxSync(&#123;\n          message: '云应用客户端' + config.version,\n          detail: '*******',\n          type: 'info'\n        &#125;)\n      &#125;\n    &#125;,\n    &#123;\n      label: '打开 云应用',\n      click: () =&gt; &#123;\n        win.show()\n        win.setSkipTaskbar(false) // 显示任务栏图标\n      &#125;\n    &#125;,\n    &#123;\n      label: '退出 云应用',\n      click: () =&gt; &#123;\n        win.setSkipTaskbar(true) // 隐藏任务栏图标\n        win.destroy()\n        app.quit()\n      &#125;\n    &#125;\n  ])\n  tray.setToolTip('云应用')\n  tray.setContextMenu(contextMenu)\n  tray.on('click', () =&gt; &#123;\n    win.show()\n    win.setSkipTaskbar(false)\n  &#125;)\n&#125;\n</code></pre>\n<p><img data-src=\"./preview.png\" alt=\"App Screenshot\" /></p>\n<p>🤔 其他参数请移步<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvemgvZG9jcy9sYXRlc3QvYXBpL3RyYXk=\">官网</span>查看详细信息</p>\n<p>💬 有问题欢迎指出...</p>\n",
            "tags": [
                "electron"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-process-communicate/",
            "url": "https://moorelxr.github.io/electron-process-communicate/",
            "title": "electron进程通信",
            "date_published": "2022-10-11T10:00:53.000Z",
            "content_html": "<h1 id=\"electron-进程间通信\"><a class=\"anchor\" href=\"#electron-进程间通信\">#</a> electron 进程间通信</h1>\n<h2 id=\"electron-为我们提供了-2-个-ipc进程间通信模块称为ipcmain和ipcrender\"><a class=\"anchor\" href=\"#electron-为我们提供了-2-个-ipc进程间通信模块称为ipcmain和ipcrender\">#</a> electron 为我们提供了 2 个 IPC (进程间通信) 模块，称为 <code>ipcMain</code>  和 <code>ipcRender</code></h2>\n<p>ipcMain：主进程向渲染进程的异步通信</p>\n<p>ipcRenderer：渲染进程向主进程发送消息</p>\n<h2 id=\"示例-1渲染进程向主进程发送消息\"><a class=\"anchor\" href=\"#示例-1渲染进程向主进程发送消息\">#</a> 示例 1：渲染进程向主进程发送消息</h2>\n<p>渲染进程发消息：</p>\n<pre><code>import &#123; ipcRenderer &#125; from 'electron'\nexport default&#123;\n  methods: &#123;\n    minimizeWin() &#123;\n      ipcRenderer.send('window-min')\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>主进程（background.js）接收消息：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain &#125; from 'electron'\n\n// 主进程接收消息\nipcMain.on('window-min', () =&gt; &#123;\n  win.minimize()\n&#125;)\n</code></pre>\n<h2 id=\"示例-2主进程向渲染进程发送消息\"><a class=\"anchor\" href=\"#示例-2主进程向渲染进程发送消息\">#</a> 示例 2：主进程向渲染进程发送消息</h2>\n<p>主进程（background.js）发送消息：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain &#125; from 'electron'\n\nipcMain.on('window-destroy', () =&gt; &#123;\n  // 主进程发送消息\n  win.webContents.send('window-destroy')\n&#125;)\n</code></pre>\n<p>渲染进程接收消息</p>\n<pre><code>import &#123; ipcRenderer &#125; from 'electron'\nexport default&#123;\n  mounted() &#123;\n    ipcRenderer.on('window-destroy', (event, data) =&gt; &#123;\n      // do something\n    &#125;)\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"示例-3双向通信\"><a class=\"anchor\" href=\"#示例-3双向通信\">#</a> 示例 3：双向通信</h2>\n<p>渲染进程：</p>\n<pre><code>import &#123; ipcRenderer &#125; from 'electron'\nexport default&#123;\n  data() &#123;\n    return &#123;\n      mountPath: ''\n    &#125;\n  &#125;,\n  methods: &#123;\n    openFilePicker() &#123;\n      // 向主进程发送消息\n      ipcRenderer.send('openfile')\n      // 接收主进程的消息\n      ipcRenderer.once('openfile', (event, data) =&gt; &#123;\n        // do some thing\n      &#125;)\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>主进程（background.js）：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain, dialog &#125; from 'electron'\nconst os = require('os')\n\n// 接收渲染进程的消息\nipcMain.on('openfile', (event) =&gt; &#123;\n  dialog.showOpenDialog(&#123;\n    defaultPath: os.homedir(),\n    properties: ['openDirectory']\n  &#125;).then(res =&gt; &#123;\n    event.sender.send('openfile', res.filePaths) // 向渲染进程发消息\n  &#125;).catch(err =&gt; &#123;\n    console.log(err)\n  &#125;)\n&#125;)\n</code></pre>\n<p>以上就是进程通信的所有内容，🤔 有问题欢迎指出...</p>\n",
            "tags": [
                "electron"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-introduce/",
            "url": "https://moorelxr.github.io/electron-introduce/",
            "title": "eletron介绍",
            "date_published": "2022-09-11T14:03:14.000Z",
            "content_html": "<h1 id=\"一-electron-介绍\"><a class=\"anchor\" href=\"#一-electron-介绍\">#</a> 一、electron 介绍</h1>\n<p><em>官网 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcv\">https://www.electronjs.org/</span>)</em></p>\n<p>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序，通过将 Chromium 和 Node.js 合并到同一个运行环境中，兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序。</p>\n<p><img data-src=\"./1.png\" alt=\"App Screenshot\" /></p>\n<h2 id=\"二-优势\"><a class=\"anchor\" href=\"#二-优势\">#</a> 二、优势</h2>\n<ul>\n<li>大大降低了开发桌面应用的门槛</li>\n<li>跨平台 可以打包成 Mac、Windows 和 Linux 三个平台的应用程序</li>\n<li>Chromium 作为内核，无需考虑兼容性，一套代码兼容多个平台</li>\n</ul>\n<h2 id=\"三-需要用到的前端技术\"><a class=\"anchor\" href=\"#三-需要用到的前端技术\">#</a> 三、需要用到的前端技术</h2>\n<ul>\n<li>Html、CSS、JavaScript、ES6</li>\n<li>前端开发工具 Vue、Angular、React 等的一种</li>\n<li>进阶使用可能还需要 node.js</li>\n</ul>\n<h2 id=\"四-项目搭建\"><a class=\"anchor\" href=\"#四-项目搭建\">#</a> 四、项目搭建</h2>\n<p>1. 使用 vue-cli 创建 vue 项目</p>\n<pre><code>vue create electron-test\n</code></pre>\n<p>2. 安装插件 vue-cli-plugin-electron-builder</p>\n<pre><code>vue add electron-builder\n</code></pre>\n<p>安装完项目结构新增了以下内容：<br />\n<img data-src=\"./2.jpg\" alt=\"App Screenshot\" /><br />\n 其中 background.js 为 electron 主进程相关操作</p>\n<p>五、自定义打包命令<br />\n package.json 新增以下打包命令，文档参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb24uYnVpbGQvY2xp\">https://www.electron.build/cli</span></p>\n<pre><code>&quot;electron:build-linux-arm64&quot;: &quot;vue-cli-service electron:build --linux --arm64 -p never&quot;,\n&quot;electron:build-linux-x64&quot;: &quot;vue-cli-service electron:build --linux --x64 -p never&quot;,\n&quot;electron:build-win64&quot;: &quot;vue-cli-service electron:build --win --x64 -p never&quot;,\n&quot;electron:build-win32&quot;: &quot;vue-cli-service electron:build --win --ia32 -p never&quot;,\n</code></pre>\n<p>注意：linux 安装包需要在 linux 系统上编译，另外 linux arm64 系统的安装包在 arm64 上编译会报错，需要在 linux x64 上交叉编译</p>\n",
            "tags": [
                "electron"
            ]
        }
    ]
}