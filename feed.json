{
    "version": "https://jsonfeed.org/version/1",
    "title": "行到水穷处，坐看云起时",
    "subtitle": "=^-^=",
    "icon": "https://moorelxr.github.io/images/favicon.ico",
    "description": "海的尽头是什么？",
    "home_page_url": "https://MooreLxr.github.io",
    "items": [
        {
            "id": "https://moorelxr.github.io/performance-optimize/",
            "url": "https://moorelxr.github.io/performance-optimize/",
            "title": "性能优化",
            "date_published": "2023-07-27T03:52:04.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"性能优化\"><a class=\"anchor\" href=\"#性能优化\">#</a> 性能优化</h1>\n<h2 id=\"1documentcreatedocumentfragment创建文档碎片\"><a class=\"anchor\" href=\"#1documentcreatedocumentfragment创建文档碎片\">#</a> 1.document.createDocumentFragment () 创建文档碎片</h2>\n<h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<p>用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到 DOM 树，文档片段存在于内存中，并不在 DOM 树中，所以将子元素插入到文档片段时不会引起页面回流（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。</p>\n<p>举例：</p>\n<p>当我们需要往 body 中添加大量节点时，按下面这种方式，每次循环都往 body 中添加节点会导致浏览器频繁重排重绘，非常影响性能</p>\n<pre><code>for (let i = 0; i &lt; 500; i++) &#123;\n  let node = document.createElement('span')\n  let iNode = document.createElement('i')\n  node.appendChild(iNode)\n  document.body.appendChild(node)\n&#125;\n</code></pre>\n<p>改进，创建 div 节点，循环创建的节点统一存在这个 div 中，然后再将 div 添加到 body 中，但缺点是要在 body 中多添加了一层 div 包裹，而 document.createDocumentFragment () 就不会产生额外的节点</p>\n<pre><code>let oDiv = document.createElement('div')\nfor (let i = 0; i &lt; 500; i++) &#123;\n  let node = document.createElement('span')\n  let iNode = document.createElement('i')\n  node.appendChild(iNode)\n  oDiv.appendChild(node) // 动态创建的节点统一存在oDiv中\n&#125;\ndocument.body.appendChild(oDiv)\n</code></pre>\n<p>使用 document.createDocumentFragment () 进行优化，这种方式不会产生额外的 DOM 元素</p>\n<pre><code>let fragment = document.createDocumentFragment();\nfor (let i = 0; i &lt; 500; i++) &#123;\n  let node = document.createElement('span')\n  let iNode = document.createElement('i')\n  node.appendChild(iNode)\n  fragment.appendChild(node) // 动态创建的节点统一存在fragment中\n&#125;\ndocument.body.appendChild(fragment)\n</code></pre>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://moorelxr.github.io/mobile-adaption/",
            "url": "https://moorelxr.github.io/mobile-adaption/",
            "title": "移动端适配方案",
            "date_published": "2023-04-03T11:31:09.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"移动端适配\"><a class=\"anchor\" href=\"#移动端适配\">#</a> 移动端适配：</h1>\n<p>在做移动端开发时，为了使移动端的页面在不同的手机上以同样的大小来显示，我们可以将页面的宽度固定，然后获取设备的宽度，可以得到我们之前设定的宽度与设备宽度的比例，再使用 HTML5 新增的 viewport 来对页面进行缩放，并固定不允许用户再重新缩放。</p>\n<p>在 index.html 增加该配置</p>\n<pre><code>&lt;meta\n  name=&quot;viewport&quot;\n  content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no,viewport-fit=cover&quot;\n&gt;\n</code></pre>\n<h2 id=\"rem-适配淘宝和百度方案\"><a class=\"anchor\" href=\"#rem-适配淘宝和百度方案\">#</a> rem 适配 (淘宝和百度方案)</h2>\n<p>计算公式：<br />\n根字体 = （设备视口宽度 * 100） / 设计稿宽度</p>\n<pre><code>&lt;script&gt;\n// 获取布局视口宽度\nconst dpWidth = document.documentElement.clientWidth\n// 计算根字体大小\nconst rootFontSize = (dpWidth * 100) / 375\n// 设置根字体大小\ndocument.documentElement.style.fontSize = rootFontSize + 'px'\n&lt;/script&gt;\n</code></pre>\n<p>设置完根字体大小后，后续所有页面都以 rem 为单位，值为 设计稿的像素值 / 100，例如 14px = 0.14rem，这样在不用设备上都是 0.14rem, 但不同设备的 rem 代表的像素值不同，从而实现适配</p>\n<h2 id=\"vw-适配\"><a class=\"anchor\" href=\"#vw-适配\">#</a> vw 适配</h2>\n<p>它的特点很明显，没有 js 代码，但是兼容性却不好<br />\n<img data-src=\"./mobile-adaption/caniuse.png\" alt=\"App Screenshot\" /></p>\n<p>vw: 把布局视口分成 100 份，1vw = 1% 的布局视口 = 1% 的视觉视口<br />\n vh: 就是 1% 的视口高度<br />\n用 less 计算</p>\n<pre><code>@basic: 375 / 100vw;\n*&#123;\n  margin: 0;\n  padding: 0;\n&#125;\n.demo&#123;\n  width: (100/@basic);\n  height: (100/@basic);\n  background-color: black;\n&#125;\n</code></pre>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://moorelxr.github.io/tool/",
            "url": "https://moorelxr.github.io/tool/",
            "title": "办公工具合集",
            "date_published": "2023-02-11T10:00:53.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"办公工具合集\"><a class=\"anchor\" href=\"#办公工具合集\">#</a> 办公工具合集</h1>\n<h3 id=\"echart-社区\"><a class=\"anchor\" href=\"#echart-社区\">#</a> &gt;&gt;echart 社区</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJ0Lm1hamgudG9wLw==\">http://chart.majh.top/</span></p>\n<p>(ps: 各种丰富的 echart 图集效果)</p>\n<h3 id=\"兼容性查询\"><a class=\"anchor\" href=\"#兼容性查询\">#</a> &gt;&gt; 兼容性查询</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8=\">https://caniuse.com/</span></p>\n<h3 id=\"在线-ps\"><a class=\"anchor\" href=\"#在线-ps\">#</a> &gt;&gt; 在线 ps</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcy5nYW9kaW5nLmNvbS8jLw==\">https://ps.gaoding.com/#/</span></p>\n<h3 id=\"文叔叔在线文件传输工具\"><a class=\"anchor\" href=\"#文叔叔在线文件传输工具\">#</a> &gt;&gt; 文叔叔（在线文件传输工具）</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2Vuc2h1c2h1LmNuLw==\">https://www.wenshushu.cn/</span></p>\n<p>ps: 拿着取件码去取你的文件，跟取快递一样<sup> -</sup></p>\n<h3 id=\"拷贝兔在线文件传输工具\"><a class=\"anchor\" href=\"#拷贝兔在线文件传输工具\">#</a> &gt;&gt; 拷贝兔（在线文件传输工具）</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcC5hbnlrbmV3LmNvbS8=\">https://cp.anyknew.com/</span></p>\n<p>ps: 拿着取件码去取你的文件，跟取快递一样<sup> -</sup></p>\n<h3 id=\"图片处理工具合集\"><a class=\"anchor\" href=\"#图片处理工具合集\">#</a> &gt;&gt; 图片处理工具合集</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWFzdW90dS5jb20vdHVwaWFueWFzdW8=\">https://www.yasuotu.com/tupianyasuo</span></p>\n<h3 id=\"线上办公资源ui-办公资源\"><a class=\"anchor\" href=\"#线上办公资源ui-办公资源\">#</a> &gt;&gt; 线上办公资源：（UI、办公资源）</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYXYuc2Fua2tpLmNvbS8jL2luZGV4\">https://nav.sankki.com/#/index</span></p>\n<h3 id=\"ppt-模板免费下载\"><a class=\"anchor\" href=\"#ppt-模板免费下载\">#</a> &gt;&gt;ppt 模板免费下载：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMnBwdC5jb20vcHB0Lmh0bWw=\">https://www.2ppt.com/ppt.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTFwcHRtb2Jhbi5jb20vZS9zZWFyY2gvcmVzdWx0Lz9zZWFyY2hpZD0yNzgyMA==\">https://www.51pptmoban.com/e/search/result/?searchid=27820</span></p>\n<h3 id=\"微博图床\"><a class=\"anchor\" href=\"#微博图床\">#</a> &gt;&gt; 微博图床</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWMuZ2ltaG95LmNvbS8=\">https://pic.gimhoy.com/</span></p>\n<h3 id=\"云盘资源搜索平台\"><a class=\"anchor\" href=\"#云盘资源搜索平台\">#</a> &gt;&gt; 云盘资源搜索平台</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cHl1bnNvLmNvbS8=\">https://upyunso.com/</span></p>\n<h1 id=\"娱乐网站合集\"><a class=\"anchor\" href=\"#娱乐网站合集\">#</a> 娱乐网站合集</h1>\n<h3 id=\"厂长资源\"><a class=\"anchor\" href=\"#厂长资源\">#</a> &gt;&gt; 厂长资源</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jenp5MDEuY29tLw==\">https://czzy01.com/</span></p>\n<h3 id=\"小众技术\"><a class=\"anchor\" href=\"#小众技术\">#</a> &gt;&gt; 小众技术</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueGlhb3pob25namlzaHUuY29tLw==\">https://www.xiaozhongjishu.com/</span></p>\n<h1 id=\"找工作合集\"><a class=\"anchor\" href=\"#找工作合集\">#</a> 找工作合集</h1>\n<h3 id=\"知页简历\"><a class=\"anchor\" href=\"#知页简历\">#</a> &gt;&gt; 知页简历</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpeWVhcHAuY29tLw==\">https://www.zhiyeapp.com/</span></p>\n<p>(ps: 提供免费简历模板、在线编辑)</p>\n<h3 id=\"ai-简历\"><a class=\"anchor\" href=\"#ai-简历\">#</a> &gt;&gt;AI 简历</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2h6aGtlamkuY29tLw==\">https://www.chzhkeji.com/</span></p>\n",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-build-error/",
            "url": "https://moorelxr.github.io/electron-build-error/",
            "title": "electron打包错误",
            "date_published": "2022-10-11T10:05:51.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"electron-打包遇到的问题\"><a class=\"anchor\" href=\"#electron-打包遇到的问题\">#</a> electron 打包遇到的问题</h1>\n<h2 id=\"一-网络下载失败\"><a class=\"anchor\" href=\"#一-网络下载失败\">#</a> 一、网络下载失败</h2>\n<p>electron 打包过程中，由于网络原因（我是内网开发），下载 github 上的包出错，主要有以下包：</p>\n<h3 id=\"1electron-v1369-win32-x64zip\"><a class=\"anchor\" href=\"#1electron-v1369-win32-x64zip\">#</a> 1.electron-v13.6.9-win32-x64.zip</h3>\n<p><img data-src=\"./electron-build-error/%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%991.png\" alt=\"App Screenshot\" /></p>\n<h3 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uL2VsZWN0cm9uL3JlbGVhc2VzL2Rvd25sb2FkL3YxMy42LjkvZWxlY3Ryb24tdjEzLjYuOS13aW4zMi14NjQuemlw\">https://github.com/electron/electron/releases/download/v13.6.9/electron-v13.6.9-win32-x64.zip</span></p>\n<p>离线下载 electron-v13.6.9-win32-x64.zip，再放到对应目录下:</p>\n<pre><code>windows:C:\\Users\\Administrator\\AppData\\Local\\electron\\Cache\nLinux:~/.cache/electron\nmacOS:~/Library/Caches/electron\n</code></pre>\n<p>如图：<br />\n<img data-src=\"./electron-build-error/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B31.png\" alt=\"App Screenshot\" /></p>\n<h3 id=\"2wincodesign-2607z\"><a class=\"anchor\" href=\"#2wincodesign-2607z\">#</a> 2.winCodeSign-2.6.0.7z</h3>\n<p><img data-src=\"./electron-build-error/%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%992.png\" alt=\"App Screenshot\" /></p>\n<h3 id=\"解决方案-2\"><a class=\"anchor\" href=\"#解决方案-2\">#</a> 解决方案：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvd2luQ29kZVNpZ24tMi42LjAvd2luQ29kZVNpZ24tMi42LjAuN3o=\">https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.6.0/winCodeSign-2.6.0.7z</span></p>\n<p>离线下载 winCodeSign-2.6.0.7z，再放到对应目录下:</p>\n<pre><code>windows:C:\\Users\\Administrator\\AppData\\Local\\electron-builder\\Cache\n</code></pre>\n<p>如图：<br />\n<img data-src=\"./electron-build-error/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B32.png\" alt=\"App Screenshot\" /></p>\n<h3 id=\"3nsis-30417z\"><a class=\"anchor\" href=\"#3nsis-30417z\">#</a> 3.nsis-3.0.4.1.7z</h3>\n<p><img data-src=\"./electron-build-error/%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%993.png\" alt=\"App Screenshot\" /></p>\n<h3 id=\"解决方案-3\"><a class=\"anchor\" href=\"#解决方案-3\">#</a> 解决方案：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvbnNpcy0zLjAuNC4xL25zaXMtMy4wLjQuMS43eg==\">https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z</span></p>\n<p>离线下载 nsis-3.0.4.1.7z，再放到对应目录下:</p>\n<pre><code>windows:C:\\Users\\Administrator\\AppData\\Local\\electron-builder\\Cache\\nsis\n</code></pre>\n<p>如图：<br />\n<img data-src=\"./electron-build-error/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B33.png\" alt=\"App Screenshot\" /></p>\n<h3 id=\"4nsis-resources-3417z\"><a class=\"anchor\" href=\"#4nsis-resources-3417z\">#</a> 4.nsis-resources-3.4.1.7z</h3>\n<p><img data-src=\"./electron-build-error/%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%994.png\" alt=\"App Screenshot\" /></p>\n<h3 id=\"解决方案-4\"><a class=\"anchor\" href=\"#解决方案-4\">#</a> 解决方案：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvbnNpcy1yZXNvdXJjZXMtMy40LjEvbnNpcy1yZXNvdXJjZXMtMy40LjEuN3o=\">https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z</span></p>\n<p>离线下载 nsis-resources-3.4.1.7z，再放到对应目录下:</p>\n<pre><code>windows:C:\\Users\\Administrator\\AppData\\Local\\electron-builder\\Cache\\nsis\n</code></pre>\n<p>如图：<br />\n<img data-src=\"./electron-build-error/%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B34.png\" alt=\"App Screenshot\" /></p>\n<p>再次打包，成功了！！！</p>\n<h2 id=\"二-国产操作系统通信-uos-arm64-版\"><a class=\"anchor\" href=\"#二-国产操作系统通信-uos-arm64-版\">#</a> 二、国产操作系统（通信 UOS arm64 版）</h2>\n<p>打包流程参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdHV5aWxlMDA2L3AvMTYzOTk3NDUuaHRtbA==\">linux 打包</span></p>\n<h3 id=\"1-arm64-适配\"><a class=\"anchor\" href=\"#1-arm64-适配\">#</a> 1. arm64 适配:</h3>\n<p>安装完 node.js、vscode 等必要的开发环境后，在通信 UOS arm64 位下打包 electron 项目依然会报错<br />\n<img data-src=\"./electron-build-error/linux/arm64.png\" alt=\"App Screenshot\" /></p>\n<p>从报错信息可以看到，electron 在 linux 下使用 fpm 进行打包，然而下载的是 x86 的包，而不是 arm64 架构的包</p>\n<h4 id=\"解决方案-5\"><a class=\"anchor\" href=\"#解决方案-5\">#</a> 解决方案：</h4>\n<p>在 x86 上交叉编译出 arm64 的包，重新打包一下成功了！！！</p>\n<p>🤧 记录下踩坑合集，下回开发效率一定冲冲冲 🚀🚀🚀</p>\n<p>内网开发真的太痛苦了 😭😭😭</p>\n",
            "tags": [
                "electron"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-multi-window/",
            "url": "https://moorelxr.github.io/electron-multi-window/",
            "title": "electron开启多窗口",
            "date_published": "2022-10-11T10:04:06.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"electron-显示多个窗口\"><a class=\"anchor\" href=\"#electron-显示多个窗口\">#</a> electron 显示多个窗口</h1>\n<p>主进程：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain, Notification &#125; from 'electron'\n\nlet win\nlet loadingWin\nfunction createWindow() &#123;\n  win = new BrowserWindow(&#123;\n    width: 1024,\n    height: 768\n  &#125;)\n  // 加载另一个窗口\n  loadingWin = new BrowserWindow(&#123;\n    width: 350,\n    height: 356,\n    show: false\n  &#125;)\n  if (process.env.WEBPACK_DEV_SERVER_URL) &#123; // 开发环境\n    await win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)\n    await loadingWin.loadURL(process.env.WEBPACK_DEV_SERVER_URL + '#/loading')\n    if (!process.env.IS_TEST) win.webContents.openDevTools()\n  &#125; else &#123;\n    createProtocol('app')\n    win.loadURL('app://./index.html')\n    loadingWin.loadURL('app://./index.html#/loading') // 加载窗口展示的页面\n  &#125;\n&#125;\n// 打开或关闭loading窗口\nipcMain.on('loading-window', async (event, arg) =&gt; &#123;\n  if (arg === 'open') loadingWin.show()\n  else if (arg === 'close') loadingWin.hide()\n&#125;)\n</code></pre>\n<p><img data-src=\"./electron-multi-window/preview.png\" alt=\"App Screenshot\" /></p>\n<p>🚀</p>\n",
            "tags": [
                "electron"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-notification/",
            "url": "https://moorelxr.github.io/electron-notification/",
            "title": "electron消息提醒",
            "date_published": "2022-10-11T10:03:20.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"electron-消息通知\"><a class=\"anchor\" href=\"#electron-消息通知\">#</a> electron 消息通知</h1>\n<h3 id=\"electron-提供-api-对操作系统发桌面通知消息的位置和样式保留各自系统原生的样式\"><a class=\"anchor\" href=\"#electron-提供-api-对操作系统发桌面通知消息的位置和样式保留各自系统原生的样式\">#</a> electron 提供 API 对操作系统发桌面通知，消息的位置和样式保留各自系统原生的样式</h3>\n<p>注意：消息展示必须确保系统设置允许接收通知消息</p>\n<p>主进程（background.js）：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain, Notification &#125; from 'electron'\n\n// 消息通知\nipcMain.on('show-notification', (event, arg) =&gt; &#123;\n  const notifyObj = new Notification(&#123;\n    title: arg.title,\n    body: arg.detail,\n    icon: path.join(__static, arg.icon || 'icons/cloud_client.png') // __static指向public文件夹\n  &#125;)\n  notifyObj.show()\n&#125;)\n</code></pre>\n<p>渲染进程：</p>\n<pre><code>import &#123; ipcRenderer &#125; from 'electron'\nexport default&#123;\n  mounted() &#123;\n    sendMessage() &#123;\n      ipcRenderer.send('show-notification', &#123;\n        title: '云应用',\n        detail: '文件传输成功',\n        icon: 'icons/success.png'\n      &#125;)\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p><img data-src=\"./electron-notification/preview.png\" alt=\"App Screenshot\" /></p>\n<p>🤔 以上是最简单的使用案例，其他参数请移步<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvemgvZG9jcy9sYXRlc3QvYXBpL25vdGlmaWNhdGlvbg==\">官网</span>查看详细信息</p>\n<p><code>^_^</code>  有问题欢迎指出...</p>\n",
            "tags": [
                "electron"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-tray/",
            "url": "https://moorelxr.github.io/electron-tray/",
            "title": "electron系统托盘",
            "date_published": "2022-10-11T10:02:35.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"electron-创建系统托盘\"><a class=\"anchor\" href=\"#electron-创建系统托盘\">#</a> electron 创建系统托盘</h1>\n<p>主进程（background.js）：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain, Tray, Menu, nativeImage &#125; from 'electron'\n\nlet win\nfunction createWindow() &#123;\n  // 创建窗口\n  ...\n  createTrayIcon()\n&#125;\n\n// 创建系统托盘\nlet tray\nfunction createTrayIcon() &#123;\n  const iconPath = nativeImage.createFromPath(path.join(__static, 'icons/cloud_client.png')) // __static指向public文件夹\n  tray = new Tray(iconPath)\n  const contextMenu = Menu.buildFromTemplate([\n    &#123;\n      label: '产品介绍',\n      click: () =&gt; &#123;\n        dialog.showMessageBoxSync(&#123;\n          message: '云应用客户端' + config.version,\n          detail: '*******',\n          type: 'info'\n        &#125;)\n      &#125;\n    &#125;,\n    &#123;\n      label: '打开 云应用',\n      click: () =&gt; &#123;\n        win.show()\n        win.setSkipTaskbar(false) // 显示任务栏图标\n      &#125;\n    &#125;,\n    &#123;\n      label: '退出 云应用',\n      click: () =&gt; &#123;\n        win.setSkipTaskbar(true) // 隐藏任务栏图标\n        win.destroy()\n        app.quit()\n      &#125;\n    &#125;\n  ])\n  tray.setToolTip('云应用')\n  tray.setContextMenu(contextMenu)\n  tray.on('click', () =&gt; &#123;\n    win.show()\n    win.setSkipTaskbar(false)\n  &#125;)\n&#125;\n</code></pre>\n<p><img data-src=\"./electron-tray/preview.png\" alt=\"App Screenshot\" /></p>\n<p>🤔 其他参数请移步<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvemgvZG9jcy9sYXRlc3QvYXBpL3RyYXk=\">官网</span>查看详细信息</p>\n<p>💬 有问题欢迎指出...</p>\n",
            "tags": [
                "electron"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-process-communicate/",
            "url": "https://moorelxr.github.io/electron-process-communicate/",
            "title": "electron进程通信",
            "date_published": "2022-10-11T10:00:53.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"electron-进程间通信\"><a class=\"anchor\" href=\"#electron-进程间通信\">#</a> electron 进程间通信</h1>\n<h2 id=\"electron-为我们提供了-2-个-ipc进程间通信模块称为ipcmain和ipcrender\"><a class=\"anchor\" href=\"#electron-为我们提供了-2-个-ipc进程间通信模块称为ipcmain和ipcrender\">#</a> electron 为我们提供了 2 个 IPC (进程间通信) 模块，称为 <code>ipcMain</code>  和 <code>ipcRender</code></h2>\n<p>ipcMain：主进程向渲染进程的异步通信</p>\n<p>ipcRenderer：渲染进程向主进程发送消息</p>\n<h2 id=\"示例-1渲染进程向主进程发送消息\"><a class=\"anchor\" href=\"#示例-1渲染进程向主进程发送消息\">#</a> 示例 1：渲染进程向主进程发送消息</h2>\n<p>渲染进程发消息：</p>\n<pre><code>import &#123; ipcRenderer &#125; from 'electron'\nexport default&#123;\n  methods: &#123;\n    minimizeWin() &#123;\n      ipcRenderer.send('window-min')\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>主进程（background.js）接收消息：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain &#125; from 'electron'\n\n// 主进程接收消息\nipcMain.on('window-min', () =&gt; &#123;\n  win.minimize()\n&#125;)\n</code></pre>\n<h2 id=\"示例-2主进程向渲染进程发送消息\"><a class=\"anchor\" href=\"#示例-2主进程向渲染进程发送消息\">#</a> 示例 2：主进程向渲染进程发送消息</h2>\n<p>主进程（background.js）发送消息：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain &#125; from 'electron'\n\nipcMain.on('window-destroy', () =&gt; &#123;\n  // 主进程发送消息\n  win.webContents.send('window-destroy')\n&#125;)\n</code></pre>\n<p>渲染进程接收消息</p>\n<pre><code>import &#123; ipcRenderer &#125; from 'electron'\nexport default&#123;\n  mounted() &#123;\n    ipcRenderer.on('window-destroy', (event, data) =&gt; &#123;\n      // do something\n    &#125;)\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"示例-3双向通信\"><a class=\"anchor\" href=\"#示例-3双向通信\">#</a> 示例 3：双向通信</h2>\n<p>渲染进程：</p>\n<pre><code>import &#123; ipcRenderer &#125; from 'electron'\nexport default&#123;\n  data() &#123;\n    return &#123;\n      mountPath: ''\n    &#125;\n  &#125;,\n  methods: &#123;\n    openFilePicker() &#123;\n      // 向主进程发送消息\n      ipcRenderer.send('openfile')\n      // 接收主进程的消息\n      ipcRenderer.once('openfile', (event, data) =&gt; &#123;\n        // do some thing\n      &#125;)\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>主进程（background.js）：</p>\n<pre><code>import &#123; app, BrowserWindow, ipcMain, dialog &#125; from 'electron'\nconst os = require('os')\n\n// 接收渲染进程的消息\nipcMain.on('openfile', (event) =&gt; &#123;\n  dialog.showOpenDialog(&#123;\n    defaultPath: os.homedir(),\n    properties: ['openDirectory']\n  &#125;).then(res =&gt; &#123;\n    event.sender.send('openfile', res.filePaths) // 向渲染进程发消息\n  &#125;).catch(err =&gt; &#123;\n    console.log(err)\n  &#125;)\n&#125;)\n</code></pre>\n<p>以上就是进程通信的所有内容，🤔 有问题欢迎指出...</p>\n",
            "tags": [
                "electron"
            ]
        },
        {
            "id": "https://moorelxr.github.io/electron-introduce/",
            "url": "https://moorelxr.github.io/electron-introduce/",
            "title": "eletron介绍",
            "date_published": "2022-09-11T14:03:14.000Z",
            "content_html": "<p>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</p>\n<h1 id=\"一-electron-介绍\"><a class=\"anchor\" href=\"#一-electron-介绍\">#</a> 一、electron 介绍</h1>\n<p><em>官网 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcv\">https://www.electronjs.org/</span>)</em></p>\n<p>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序，通过将 Chromium 和 Node.js 合并到同一个运行环境中，兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序。</p>\n<p><img data-src=\"./electron-introduce/1.png\" alt=\"App Screenshot\" /></p>\n<h2 id=\"二-优势\"><a class=\"anchor\" href=\"#二-优势\">#</a> 二、优势</h2>\n<ul>\n<li>大大降低了开发桌面应用的门槛</li>\n<li>跨平台 可以打包成 Mac、Windows 和 Linux 三个平台的应用程序</li>\n<li>Chromium 作为内核，无需考虑兼容性，一套代码兼容多个平台</li>\n</ul>\n<h2 id=\"三-需要用到的前端技术\"><a class=\"anchor\" href=\"#三-需要用到的前端技术\">#</a> 三、需要用到的前端技术</h2>\n<ul>\n<li>Html、CSS、JavaScript、ES6</li>\n<li>前端开发工具 Vue、Angular、React 等的一种</li>\n<li>进阶使用可能还需要 node.js</li>\n</ul>\n<h2 id=\"四-项目搭建\"><a class=\"anchor\" href=\"#四-项目搭建\">#</a> 四、项目搭建</h2>\n<p>1. 使用 vue-cli 创建 vue 项目</p>\n<pre><code>vue create electron-test\n</code></pre>\n<p>2. 安装插件 vue-cli-plugin-electron-builder</p>\n<pre><code>vue add electron-builder\n</code></pre>\n<p>安装完项目结构新增了以下内容：<br />\n<img data-src=\"./electron-introduce/2.jpg\" alt=\"App Screenshot\" /><br />\n 其中 background.js 为 electron 主进程相关操作</p>\n<p>五、自定义打包命令<br />\n package.json 新增以下打包命令，文档参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb24uYnVpbGQvY2xp\">https://www.electron.build/cli</span></p>\n<pre><code>&quot;electron:build-linux-arm64&quot;: &quot;vue-cli-service electron:build --linux --arm64 -p never&quot;,\n&quot;electron:build-linux-x64&quot;: &quot;vue-cli-service electron:build --linux --x64 -p never&quot;,\n&quot;electron:build-win64&quot;: &quot;vue-cli-service electron:build --win --x64 -p never&quot;,\n&quot;electron:build-win32&quot;: &quot;vue-cli-service electron:build --win --ia32 -p never&quot;,\n</code></pre>\n<p>注意：linux 安装包需要在 linux 系统上编译，另外 linux arm64 系统的安装包在 arm64 上编译会报错，需要在 linux x64 上交叉编译</p>\n",
            "tags": [
                "electron"
            ]
        }
    ]
}