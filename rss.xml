<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>行到水穷处，坐看云起时</title>
        <subtitle>=^-^=</subtitle>
        <icon>https://moorelxr.github.io/images/favicon.ico</icon>
        <link>https://MooreLxr.github.io</link>
        <author>
          <name>sunrise</name>
        </author>
        <description>海的尽头是什么？</description>
        <language>zh-CN</language>
        <pubDate>Tue, 08 Oct 2024 16:48:30 +0800</pubDate>
        <lastBuildDate>Tue, 08 Oct 2024 16:48:30 +0800</lastBuildDate>
        <category term="心之所想" />
        <category term="" />
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/el-table/</guid>
            <title>el-table 实现多级表头、合并行、合并表头、表头文字换行</title>
            <link>https://moorelxr.github.io/el-table/</link>
            <category term="element-ui" scheme="https://moorelxr.github.io/tags/element-ui/" />
            <pubDate>Tue, 08 Oct 2024 16:48:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;后台项目中经常会出现复杂表格的使用，以下列举几个常见表格的实现&lt;/p&gt;
&lt;h2 id=&#34;一-多级表头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-多级表头&#34;&gt;#&lt;/a&gt; 一、多级表头&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;el-table
  :data=&amp;quot;tableData&amp;quot;
  border
  style=&amp;quot;width: 100%;&amp;quot;
  :cell-style=&amp;quot;&amp;#123; &#39;text-align&#39;: &#39;center&#39; &amp;#125;&amp;quot;
  :header-cell-style=&amp;quot;&amp;#123; &#39;text-align&#39;: &#39;center&#39; &amp;#125;&amp;quot;
&amp;gt;
    &amp;lt;el-table-column 
      v-for=&amp;quot;(col, i) in tableCols&amp;quot;
      :label=&amp;quot;col.label&amp;quot;
      :prop=&amp;quot;col.prop&amp;quot;
      :key=&amp;quot;i&amp;quot;
      :width=&amp;quot;col.width&amp;quot;
      :show-overflow-tooltip=&amp;quot;col.showOverflowTooltip&amp;quot;
      :formatter=&amp;quot;col.formatter &amp;amp;&amp;amp; col.formatter&amp;quot;
    &amp;gt;
      &amp;lt;template v-if=&amp;quot;col.children&amp;quot;&amp;gt;
        &amp;lt;el-table-column 
          v-for=&amp;quot;(subCol, j) in col.children&amp;quot;
          :label=&amp;quot;subCol.label&amp;quot;
          :prop=&amp;quot;subCol.prop&amp;quot;
          :key=&amp;quot;j&amp;quot;
          :formatter=&amp;quot;subCol.formatter &amp;amp;&amp;amp; subCol.formatter&amp;quot;
          :class-name=&amp;quot;col.className&amp;quot;
          :width=&amp;quot;subCol.width&amp;quot;
        &amp;gt;
          &amp;lt;template v-if=&amp;quot;subCol.children&amp;quot;&amp;gt;
            &amp;lt;el-table-column 
              v-for=&amp;quot;(item, h) in subCol.children&amp;quot;
              :label=&amp;quot;item.label&amp;quot;
              :prop=&amp;quot;item.prop&amp;quot;
              :key=&amp;quot;h&amp;quot;
              :formatter=&amp;quot;item.formatter &amp;amp;&amp;amp; item.formatter&amp;quot;
              :class-name=&amp;quot;item.className&amp;quot;
              :width=&amp;quot;item.width&amp;quot;
            &amp;gt;&amp;lt;/el-table-column&amp;gt;
          &amp;lt;/template&amp;gt;
        &amp;lt;/el-table-column&amp;gt;
      &amp;lt;/template&amp;gt;
  &amp;lt;/el-table-column&amp;gt;
&amp;lt;/el-table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
export default &amp;#123;
  name: &#39;complex-table&#39;,
  data() &amp;#123;
    return &amp;#123;
      tableCols: [
        &amp;#123; label: &#39;日期&#39;, prop: &#39;date&#39;, width: 150, rowspan: true &amp;#125;,
        &amp;#123;
          label: &#39;配送信息&#39;,
          prop: &#39;shipingInfo&#39;,
          rowspan: true,
          children: [
            &amp;#123; label: &#39;姓名&#39;, prop: &#39;name&#39;, rowspan: true &amp;#125;,
            &amp;#123;
              label: &#39;地址&#39;,
              prop: &#39;addr&#39;,
              rowspan: false,
              children: [
                &amp;#123; label: &#39;省份&#39;, prop: &#39;province&#39;, rowspan: false &amp;#125;,
                &amp;#123; label: &#39;市区&#39;, prop: &#39;city&#39;, rowspan: false &amp;#125;,
                &amp;#123; label: &#39;地址&#39;, prop: &#39;address&#39;, rowspan: false &amp;#125;
              ]
            &amp;#125;
          ]
        &amp;#125;
      ],
      tableData: [
        &amp;#123; date: &#39;2016-05-03&#39;, name: &#39;王小虎&#39;, province: &#39;上海&#39;, city: &#39;普陀区&#39;, address: &#39;上海市普陀区金沙江路 1518 弄&#39;&amp;#125;,
        &amp;#123; date: &#39;2016-05-02&#39;, name: &#39;王小虎&#39;, province: &#39;上海&#39;, city: &#39;普陀区&#39;, address: &#39;上海市普陀区金沙江路 1518 弄&#39;&amp;#125;,
        &amp;#123; date: &#39;2016-05-04&#39;, name: &#39;王晓六&#39;, province: &#39;江西&#39;, city: &#39;普陀区&#39;, address: &#39;上海市普陀区金沙江路 1518 弄&#39;&amp;#125;,
        &amp;#123; date: &#39;2016-05-01&#39;, name: &#39;王晓六&#39;, province: &#39;江西&#39;, city: &#39;普陀区&#39;, address: &#39;上海市普陀区金沙江路 1518 弄&#39;&amp;#125;,
        &amp;#123; date: &#39;2016-05-08&#39;, name: &#39;小海&#39;, province: &#39;江西&#39;, city: &#39;普陀区&#39;, address: &#39;上海市普陀区金沙江路 1518 弄&#39;&amp;#125;,
        &amp;#123; date: &#39;2016-05-06&#39;, name: &#39;笑笑&#39;, province: &#39;福建&#39;, city: &#39;普陀区&#39;, address: &#39;上海市普陀区金沙江路 1518 弄&#39;&amp;#125;,
        &amp;#123; date: &#39;2016-05-07&#39;, name: &#39;筱筱&#39;, province: &#39;福建&#39;, city: &#39;普陀区&#39;, address: &#39;上海市普陀区金沙江路 1518 弄&#39;&amp;#125;
      ]
    &amp;#125;
  &amp;#125;
&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;展示效果：&lt;br /&gt;
&lt;img data-src=&#34;./1.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-合并行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-合并行&#34;&gt;#&lt;/a&gt; 二、合并行&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;el-table 
  :data=&amp;quot;tableData&amp;quot;
  border
  :span-method=&amp;quot;objectSpanMethod&amp;quot;
&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday1&amp;quot; label=&amp;quot;周一&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday2&amp;quot; label=&amp;quot;周二&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday3&amp;quot; label=&amp;quot;周三&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday4&amp;quot; label=&amp;quot;周四&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday5&amp;quot; label=&amp;quot;周五&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday6&amp;quot; label=&amp;quot;周六&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday7&amp;quot; label=&amp;quot;周日&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
&amp;lt;/el-table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
export default &amp;#123;
  data() &amp;#123;
    return &amp;#123;
      tableData: [
        &amp;#123;
          rotaId: &#39;xxx-1&#39;,
          rotaName: &#39;值班表名1&#39;,
          dutyTypeId: &amp;quot;type0001&amp;quot;,
          dutyTypeName: &amp;quot;值班类型1&amp;quot;,
          &#39;2024-09-16&#39;: [],
          &#39;2024-09-17&#39;: [],
          &#39;2024-09-18&#39;: [],
          &#39;2024-09-19&#39;: [],
          &#39;2024-09-20&#39;: [],
          &#39;2024-09-21&#39;: [],
          &#39;2024-09-22&#39;: []
        &amp;#125;,
        &amp;#123;
          rotaId: &#39;xxx-1&#39;,
          rotaName: &#39;值班表名1&#39;,
          dutyTypeId: &amp;quot;type0002&amp;quot;,
          dutyTypeName: &amp;quot;值班类型2&amp;quot;,
          &#39;2024-09-16&#39;: [],
          &#39;2024-09-17&#39;: [],
          &#39;2024-09-18&#39;: [],
          &#39;2024-09-19&#39;: [],
          &#39;2024-09-20&#39;: [],
          &#39;2024-09-21&#39;: [],
          &#39;2024-09-22&#39;: []
        &amp;#125;,
        &amp;#123;
          rotaId: &#39;xxx-2&#39;,
          rotaName: &#39;值班表名2&#39;,
          dutyTypeId: &amp;quot;type0003&amp;quot;,
          dutyTypeName: &amp;quot;值班类型3&amp;quot;,
          &#39;2024-09-16&#39;: [],
          &#39;2024-09-17&#39;: [],
          &#39;2024-09-18&#39;: [],
          &#39;2024-09-19&#39;: [],
          &#39;2024-09-20&#39;: [],
          &#39;2024-09-21&#39;: [],
          &#39;2024-09-22&#39;: []
        &amp;#125;
      ]
    &amp;#125;
  &amp;#125;,
  methods: &amp;#123;
    // 行合并方法
    objectSpanMethod (&amp;#123; row, column, rowIndex, columnIndex &amp;#125;) &amp;#123;
      const dataProvider = this.tableData
      const cellValue = row[column.property]
      
      if (cellValue || cellValue===0) &amp;#123;
        let prevRow = dataProvider[rowIndex - 1] // 上一条数据
        let nextRow = dataProvider[rowIndex + 1] // 下一条数据
        // 当上一条数据等于下一条数据
        if (prevRow &amp;amp;&amp;amp; prevRow[column.property] === cellValue) &amp;#123;
          return &amp;#123; rowspan: 0, colspan: 0 &amp;#125;
        &amp;#125; else &amp;#123;
          let rowspan = 1
          while (nextRow &amp;amp;&amp;amp; nextRow[column.property] === cellValue) &amp;#123;
            rowspan++
            nextRow = dataProvider[rowspan + rowIndex]
          &amp;#125;
          if (rowspan &amp;gt; 1) return &amp;#123; rowspan, colspan: 1 &amp;#125;
        &amp;#125;
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;展示效果：&lt;br /&gt;
&lt;img data-src=&#34;./2.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;三-合并表头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-合并表头&#34;&gt;#&lt;/a&gt; 三、合并表头&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;el-table
  :data=&amp;quot;tableData&amp;quot;
  :span-method=&amp;quot;objectSpanMethod&amp;quot;
  :header-cell-style=&amp;quot;headRowStyle&amp;quot;
  height=&amp;quot;calc(100% - 90px)&amp;quot;
  border
&amp;gt;
  &amp;lt;!-- 合并前两列的表头 --&amp;gt;
  &amp;lt;el-table-column align=&amp;quot;center&amp;quot; label=&amp;quot;值班信息&amp;quot;&amp;gt;
    &amp;lt;el-table-column prop=&amp;quot;rotaName&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
    &amp;lt;el-table-column prop=&amp;quot;dutyTypeName&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday1&amp;quot; label=&amp;quot;周一&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday2&amp;quot; label=&amp;quot;周二&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday3&amp;quot; label=&amp;quot;周三&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday4&amp;quot; label=&amp;quot;周四&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday5&amp;quot; label=&amp;quot;周五&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday6&amp;quot; label=&amp;quot;周六&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday7&amp;quot; label=&amp;quot;周日&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
&amp;lt;/el-table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// 表头合并的方法
headRowStyle(&amp;#123; row, colunm, rowIndex, columnIndex &amp;#125;) &amp;#123;
  if (rowIndex === 1) &amp;#123;
    //这里为了是将第二列的表头隐藏，就形成了合并表头的效果
    return &amp;#123; display: &#39;none&#39; &amp;#125;
  &amp;#125;
  return &amp;quot;background:#f5f7fa&amp;quot;
&amp;#125;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;展示效果：&lt;br /&gt;
&lt;img data-src=&#34;./3.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;四-表头文字换行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-表头文字换行&#34;&gt;#&lt;/a&gt; 四、表头文字换行&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;el-table
  :data=&amp;quot;tableData&amp;quot;
  height=&amp;quot;calc(100% - 90px)&amp;quot;
  border
&amp;gt;
 &amp;lt;!-- 加上\n可实现换行 --&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday1&amp;quot; label=&amp;quot;周一\n09-16&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday2&amp;quot; label=&amp;quot;周二\n09-17&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday3&amp;quot; label=&amp;quot;周三\n09-18&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday4&amp;quot; label=&amp;quot;周四\n09-19&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday5&amp;quot; label=&amp;quot;周五\n09-20&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday6&amp;quot; label=&amp;quot;周六\n09-21&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
  &amp;lt;el-table-column prop=&amp;quot;weekday7&amp;quot; label=&amp;quot;周日\n09-22&amp;quot; width=&amp;quot;180&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;/el-table-column&amp;gt;
&amp;lt;/el-table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/*表头换行 加这段css代码*/
::v-deep .el-table th.el-table__cell &amp;gt; .cell &amp;#123;
  white-space: pre;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;展示效果：&lt;br /&gt;
&lt;img data-src=&#34;./4.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/redis/</guid>
            <title>redis</title>
            <link>https://moorelxr.github.io/redis/</link>
            <category term="redis" scheme="https://moorelxr.github.io/tags/redis/" />
            <pubDate>Fri, 24 May 2024 16:56:19 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;下载docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载docker&#34;&gt;#&lt;/a&gt; 下载 docker&lt;/h2&gt;
&lt;p&gt;先下载 docker desktop，用来跑 redis&lt;/p&gt;
&lt;p&gt;docker desktop&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9wcm9kdWN0cy9kb2NrZXItZGVza3RvcC8=&#34;&gt; 下载地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./redis/image.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;打开 docker desktop, 使用时需要科学上网，按下图进行配置即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./redis/image2.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 docker desktop 搜索框搜索 redis，点击 run，把 redis 官方镜像下载并跑起来。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./redis/image3.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./redis/image.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注：他让你填容器的信息:&lt;br /&gt;
 &lt;code&gt;端口映射&lt;/code&gt; 就是把主机的 6379 端口映射到容器内的 6379 端口，这样就能直接通过本机端口访问容器内的服务了，&lt;br /&gt;
 &lt;code&gt;Volumes 指定数据卷&lt;/code&gt; 用本机的任意一个目录挂载到容器内的 /data 目录，这样数据就会保存在本机。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./redis/image5.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这就是 redis 跑起来后的日志&lt;/p&gt;
&lt;h2 id=&#34;下载redis-gui工具redisinsight-anotherredisdesktopmanager-选择一个安装即可&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载redis-gui工具redisinsight-anotherredisdesktopmanager-选择一个安装即可&#34;&gt;#&lt;/a&gt; 下载 redis GUI 工具（RedisInsight、AnotherRedisDesktopManager 选择一个安装即可）&lt;/h2&gt;
&lt;h3 id=&#34;redisinsight&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redisinsight&#34;&gt;#&lt;/a&gt; RedisInsight&lt;/h3&gt;
&lt;p&gt;它是 redis 官方出的 GUI 工具，redisInsight&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9pbnNpZ2h0Lw==&#34;&gt; 下载地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./redis/image6.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;打开 RedisInsight，连接刚才用 docker 跑的 redis server：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./redis/image7.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看该服务所创建的所有 key&lt;br /&gt;
&lt;img data-src=&#34;./redis/image8.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;anotherredisdesktopmanager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#anotherredisdesktopmanager&#34;&gt;#&lt;/a&gt; AnotherRedisDesktopManager&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2psaHgxMjM0NTYvYXJ0aWNsZS9kZXRhaWxzLzEzMjI5NTI4NQ==&#34;&gt;参考&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;nodejs中使用redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nodejs中使用redis&#34;&gt;#&lt;/a&gt; node.js 中使用 redis&lt;/h2&gt;
&lt;h3 id=&#34;创建nest项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建nest项目&#34;&gt;#&lt;/a&gt; 创建 nest 项目&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;npm install g @nestjs/cli
nest new projectName
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;安装redis-创建service和module&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装redis-创建service和module&#34;&gt;#&lt;/a&gt; 安装 redis, 创建 service 和 module&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;npm install --save redis
nest g module redis
nest g service redis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;redis.module 中连接 redis, 并通过 provide 将 redis 传给 redis.service&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; Module &amp;#125; from &#39;@nestjs/common&#39;;
import &amp;#123; createClient &amp;#125; from &#39;redis&#39;;
import &amp;#123; RedisService &amp;#125; from &#39;./redis.service&#39;;

@Module(&amp;#123;
  providers: [
    RedisService,
    &amp;#123;
      provide: &#39;REDIS_CLIENT&#39;,
      async useFactory() &amp;#123;
        const client = createClient(&amp;#123;
          socket: &amp;#123;
            host: &#39;localhost&#39;,
            port: 6379
          &amp;#125;
        &amp;#125;);
        await client.connect();
        return client;
      &amp;#125;
    &amp;#125;
  ],
  exports: [RedisService]
&amp;#125;)
export class RedisModule &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在 redis.service 中注入 REDIS_CLIENT，并封装一些操作 redis 的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; Inject, Injectable &amp;#125; from &#39;@nestjs/common&#39;;
import &amp;#123; RedisClientType &amp;#125; from &#39;redis&#39;;

@Injectable()
export class RedisService &amp;#123;

    @Inject(&#39;REDIS_CLIENT&#39;)
    private redisClient: RedisClientType;

    // 定义方法
    async getPositionsList(key: string) &amp;#123;
        ...
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;app.module.ts 引入 redis.service，即可使用该文件中定义的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; BadRequestException, Controller, Get, Inject, Query &amp;#125; from &#39;@nestjs/common&#39;;
import &amp;#123; AppService &amp;#125; from &#39;./app.service&#39;;
import &amp;#123; RedisService &amp;#125; from &#39;./redis/redis.service&#39;;

@Controller()
export class AppController &amp;#123;
  constructor(private readonly appService: AppService) &amp;#123;&amp;#125;

  @Inject(RedisService)
  private redisService: RedisService;

  @Get(&#39;getPos&#39;)
  async getPos() &amp;#123;
    try &amp;#123;
      await this.redisService.getPositionsList(&#39;positions&#39;);
    &amp;#125; catch(e) &amp;#123;
      throw new BadRequestException(e.message);
    &amp;#125;
    return &amp;#123;
      message: &#39;添加成功&#39;,
      statusCode: 200
    &amp;#125;
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/nvm/</guid>
            <title>nvm</title>
            <link>https://moorelxr.github.io/nvm/</link>
            <pubDate>Tue, 07 May 2024 15:31:19 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;下载地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载地址&#34;&gt;#&lt;/a&gt; 下载地址：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz&#34;&gt;https://github.com/coreybutler/nvm-windows/releases&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./image.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;就正常的傻瓜式安装（注意：如果默认安装在 C 盘，则无需配置环境变量）&lt;/p&gt;
&lt;p&gt;检测安装是否成功：&lt;br /&gt;
&lt;img data-src=&#34;./version.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;正常出现版本号则表示安装成功&lt;/p&gt;
&lt;h3 id=&#34;配置环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置环境变量&#34;&gt;#&lt;/a&gt; 配置环境变量：&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;./path.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;圈出来的地方改成自己安装的对应路径即可&lt;/p&gt;
&lt;h3 id=&#34;配置镜像源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置镜像源&#34;&gt;#&lt;/a&gt; 配置镜像源&lt;/h3&gt;
&lt;p&gt;找到 nvm 文件位置，点开 setting&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./setting.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输入下面的镜像源&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_mirror: https://npm.taobao.org/mirrors/node/
npm_mirror: https://npm.taobao.org/mirrors/npm/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用&#34;&gt;#&lt;/a&gt; 使用&lt;/h3&gt;
&lt;p&gt;1. 先卸载之前的 node.js&lt;br /&gt;
2. 在刚刚的 nvm 文件位置打开 cmd&lt;br /&gt;
3. 输入以下代码查看 nvm 可安装的 node 版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm ls                      // 看安装的所有node.js的版本
nvm list available          // 查显示可以安装的所有node.js的版本
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4. 安装所对应的版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm install 版本号      // 例如：nvm install 14.19.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5. 切换到安装的版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nvm use 版本号           // 切换到使用指定的nodejs版本
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/el-tree-lazy/</guid>
            <title>el-tree懒加载树 手动触发load更新</title>
            <link>https://moorelxr.github.io/el-tree-lazy/</link>
            <category term="element-ui" scheme="https://moorelxr.github.io/tags/element-ui/" />
            <pubDate>Mon, 19 Feb 2024 09:59:37 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;element-ui el-tree 懒加载树组件，当对树组件进行增删改时需要手动触发 load 更新节点数据，遇到一些问题，特此记录下面三种方法，避免下次踩坑&lt;/p&gt;
&lt;h2 id=&#34;方法1通过保存currentnode和currentresolve来刷新不推荐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法1通过保存currentnode和currentresolve来刷新不推荐&#34;&gt;#&lt;/a&gt; 方法 1：通过保存 currentNode 和 currentResolve 来刷新（不推荐）&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;el-tree
    :props=&amp;quot;defaultProps&amp;quot;
    :load=&amp;quot;loadLazyTree&amp;quot;
    lazy
  &amp;gt;&amp;lt;/el-tree&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default &amp;#123;
  data() &amp;#123;
    return &amp;#123;
      defaultProps: &amp;#123;
        label: &#39;name&#39;,
        children: &#39;children&#39;,
        isLeaf: (data, node) =&amp;gt; &amp;#123;
          return !data.hasChild
        &amp;#125;
      &amp;#125;,
    &amp;#125;
  &amp;#125;,
  methods: &amp;#123;
    loadLazyTree(node, resolve) &amp;#123;
      const isRootNode = node.level === 0 ? true : false
  
      // 保存当前展开的节点数据
      this.currentNode = node
      this.currentResolve = resolve
    
      const sendData = &amp;#123;
        parentId: isRootNode ? null : node.data.id
      &amp;#125;
      getPrepPlanOrganTree(sendData).then(res =&amp;gt; &amp;#123;
        resolve(res.data)
      &amp;#125;)
    &amp;#125;,
    loadCurrentNode() &amp;#123;
      this.currentNode.childNodes = []
      this.loadLazyTree(this.currentNode, this.currentResolve)
    &amp;#125;
  &amp;#125;
&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;缺点：&lt;br /&gt;
loadLazyTree 只会针对某个节点加载一次数据，下次再展开不重新加载数据，此时保存的 this.currentNode 和 this.currentResolve 与当前点击节点不匹配，这种情况调用节点的刷新当前节点数据就是错的&lt;/p&gt;
&lt;h2 id=&#34;方法2通过nodeexpand来刷新推荐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法2通过nodeexpand来刷新推荐&#34;&gt;#&lt;/a&gt; 方法 2：通过 node.expand () 来刷新（推荐）&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;el-tree
    :props=&amp;quot;defaultProps&amp;quot;
    :load=&amp;quot;loadLazyTree&amp;quot;
    lazy
    ref=&amp;quot;tree&amp;quot;
    @node-click=&amp;quot;handleNodeClick&amp;quot;
  &amp;gt;&amp;lt;/el-tree&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default &amp;#123;
  data() &amp;#123;
    return &amp;#123;
      defaultProps: &amp;#123;
        label: &#39;name&#39;,
        children: &#39;children&#39;,
        isLeaf: (data, node) =&amp;gt; &amp;#123;
          return !data.hasChild
        &amp;#125;
      &amp;#125;,
      currentNode: null
    &amp;#125;
  &amp;#125;,
  methods: &amp;#123;
    loadLazyTree(node, resolve) &amp;#123;
      const isRootNode = node.level === 0 ? true : false
      const sendData = &amp;#123;
        parentId: isRootNode ? null : node.data.id
      &amp;#125;
      getPrepPlanOrganTree(sendData).then(res =&amp;gt; &amp;#123;
        resolve(res.data)
      &amp;#125;)
    &amp;#125;,
    // 重载当前节点
    loadCurrentNode() &amp;#123;
      let node = this.$refs.tree.getNode(this.currentNode.id) // 获取当前节点
      node.loaded = false// 设置未进行懒加载状态
      node.expand()// 重新展开节点就会间接重新触发load达到刷新效果
    &amp;#125;,
    // 获取选中的子节点
    handleNodeClick(data, node) &amp;#123;
      this.currentNode = node
      this.$emit(&#39;node-click&#39;, data)
    &amp;#125;
  &amp;#125;
&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该方法不需要缓存 resolve 这个不好拿到的入参，避免调用 loadLazyTree (node, resolve) 函数时传入缓存的 node 和 resolve 不匹配当前点击的节点&lt;/p&gt;
&lt;h2 id=&#34;方法3通过nodeloaddata来刷新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法3通过nodeloaddata来刷新&#34;&gt;#&lt;/a&gt; 方法 3：通过 node.loadData () 来刷新&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;el-tree
    :props=&amp;quot;defaultProps&amp;quot;
    :load=&amp;quot;loadLazyTree&amp;quot;
    lazy
    ref=&amp;quot;tree&amp;quot;
    @node-click=&amp;quot;handleNodeClick&amp;quot;
  &amp;gt;&amp;lt;/el-tree&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default &amp;#123;
  data() &amp;#123;
    return &amp;#123;
      defaultProps: &amp;#123;
        label: &#39;name&#39;,
        children: &#39;children&#39;,
        isLeaf: (data, node) =&amp;gt; &amp;#123;
          return !data.hasChild
        &amp;#125;
      &amp;#125;,
      currentNode: null
    &amp;#125;
  &amp;#125;,
  methods: &amp;#123;
    loadLazyTree(node, resolve) &amp;#123;
      const isRootNode = node.level === 0 ? true : false
      const sendData = &amp;#123;
        parentId: isRootNode ? &#39;&#39; : node.data.id
      &amp;#125;
      if (isRootNode) &amp;#123;
        this.rootNode = node
        this.rootLazyNodeResolve = resolve
      &amp;#125;
      getPrepPlanOrganTree(sendData).then(res =&amp;gt; &amp;#123;
        resolve(res.data)
      &amp;#125;)
    &amp;#125;,
    // 重载当前节点
    loadCurrentNode() &amp;#123;
      this.currentNode.loaded = false
      this.currentNode.childNodes = []
      this.currentNode.loadData((data) =&amp;gt; &amp;#123;
        // 懒加载完数据后做一些操作
      &amp;#125;)
    &amp;#125;,
    // 重载当前节点的父节点
    loadParentNode() &amp;#123;
      const node = this.$refs.tree.getNode(this.currentNode.id)
      if (node.parent) &amp;#123;
        node.parent.loaded = false
        node.parent.childNodes = []
        node.parent.loadData() // 刷新父节点数据
      &amp;#125; else &amp;#123;
        this.loadRootNode()
      &amp;#125;
    &amp;#125;,
    // 重载根节点
    loadRootNode() &amp;#123;
      this.rootNode.childNodes = []
      this.loadLazyTree(this.rootNode, this.rootLazyNodeResolve)
    &amp;#125;,
    // 获取选中的子节点
    handleNodeClick(data, node) &amp;#123;
      this.currentNode = node
      this.$emit(&#39;node-click&#39;, data)
    &amp;#125;
  &amp;#125;
&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wZTFkNGQyODEwNGU=&#34;&gt;el-tree 懒加载 load 手动触发 load 更新的三种方法&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGlhbmppbGluZ3F1LmNvbS8xOTA5NjMuaHRtbA==&#34;&gt; ElementUi Tree 树形控件的使用（增、删）&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/performance-optimize/</guid>
            <title>性能优化</title>
            <link>https://moorelxr.github.io/performance-optimize/</link>
            <category term="前端" scheme="https://moorelxr.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <pubDate>Thu, 27 Jul 2023 11:52:04 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;性能优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能优化&#34;&gt;#&lt;/a&gt; 性能优化&lt;/h1&gt;
&lt;h2 id=&#34;1documentcreatedocumentfragment创建文档碎片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1documentcreatedocumentfragment创建文档碎片&#34;&gt;#&lt;/a&gt; 1.document.createDocumentFragment () 创建文档碎片&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义&#34;&gt;#&lt;/a&gt; 定义&lt;/h3&gt;
&lt;p&gt;用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到 DOM 树，文档片段存在于内存中，并不在 DOM 树中，所以将子元素插入到文档片段时不会引起页面回流（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;当我们需要往 body 中添加大量节点时，按下面这种方式，每次循环都往 body 中添加节点会导致浏览器频繁重排重绘，非常影响性能&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (let i = 0; i &amp;lt; 500; i++) &amp;#123;
  let node = document.createElement(&#39;span&#39;)
  let iNode = document.createElement(&#39;i&#39;)
  node.appendChild(iNode)
  document.body.appendChild(node)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;改进，创建 div 节点，循环创建的节点统一存在这个 div 中，然后再将 div 添加到 body 中，但缺点是要在 body 中多添加了一层 div 包裹，而 document.createDocumentFragment () 就不会产生额外的节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let oDiv = document.createElement(&#39;div&#39;)
for (let i = 0; i &amp;lt; 500; i++) &amp;#123;
  let node = document.createElement(&#39;span&#39;)
  let iNode = document.createElement(&#39;i&#39;)
  node.appendChild(iNode)
  oDiv.appendChild(node) // 动态创建的节点统一存在oDiv中
&amp;#125;
document.body.appendChild(oDiv)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 document.createDocumentFragment () 进行优化，这种方式不会产生额外的 DOM 元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let fragment = document.createDocumentFragment();
for (let i = 0; i &amp;lt; 500; i++) &amp;#123;
  let node = document.createElement(&#39;span&#39;)
  let iNode = document.createElement(&#39;i&#39;)
  node.appendChild(iNode)
  fragment.appendChild(node) // 动态创建的节点统一存在fragment中
&amp;#125;
document.body.appendChild(fragment)
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/mobile-adaption/</guid>
            <title>移动端适配方案、大屏响应式处理</title>
            <link>https://moorelxr.github.io/mobile-adaption/</link>
            <category term="前端" scheme="https://moorelxr.github.io/tags/%E5%89%8D%E7%AB%AF/" />
            <pubDate>Mon, 03 Apr 2023 19:31:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;移动端适配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移动端适配&#34;&gt;#&lt;/a&gt; 移动端适配：&lt;/h1&gt;
&lt;p&gt;在做移动端开发时，为了使移动端的页面在不同的手机上以同样的大小来显示，我们可以将页面的宽度固定，然后获取设备的宽度，可以得到我们之前设定的宽度与设备宽度的比例，再使用 HTML5 新增的 viewport 来对页面进行缩放，并固定不允许用户再重新缩放。&lt;/p&gt;
&lt;p&gt;在 index.html 增加该配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta
  name=&amp;quot;viewport&amp;quot;
  content=&amp;quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no,viewport-fit=cover&amp;quot;
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rem-适配淘宝和百度方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rem-适配淘宝和百度方案&#34;&gt;#&lt;/a&gt; rem 适配 (淘宝和百度方案)&lt;/h2&gt;
&lt;p&gt;计算公式：&lt;br /&gt;
根字体 = （设备视口宽度 * 100） / 设计稿宽度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
// 获取布局视口宽度
const dpWidth = document.documentElement.clientWidth
// 计算根字体大小
const rootFontSize = (dpWidth * 100) / 375
// 设置根字体大小
document.documentElement.style.fontSize = rootFontSize + &#39;px&#39;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置完根字体大小后，后续所有页面都以 rem 为单位，值为 设计稿的像素值 / 100，例如 14px = 0.14rem，这样在不同设备上都是 0.14rem, 但不同设备的 rem 代表的像素值不同，从而实现适配&lt;/p&gt;
&lt;h2 id=&#34;vw-适配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vw-适配&#34;&gt;#&lt;/a&gt; vw 适配&lt;/h2&gt;
&lt;p&gt;它的特点很明显，没有 js 代码，但是兼容性却不好&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./caniuse.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;vw: 把布局视口分成 100 份，1vw = 1% 的布局视口 = 1% 的视觉视口&lt;br /&gt;
 vh: 就是 1% 的视口高度&lt;br /&gt;
用 less 计算&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@basic: 375 / 100vw;
*&amp;#123;
  margin: 0;
  padding: 0;
&amp;#125;
.demo&amp;#123;
  width: (100/@basic);
  height: (100/@basic);
  background-color: black;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;大屏响应式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大屏响应式&#34;&gt;#&lt;/a&gt; 大屏响应式：&lt;/h1&gt;
&lt;h2 id=&#34;rem适配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rem适配&#34;&gt;#&lt;/a&gt; rem 适配&lt;/h2&gt;
&lt;p&gt;通过设置根字体大小 1rem=**px，设置完根字体大小后，后续所有页面都以 rem 为单位，但不同设备的 1rem 代表的像素值不同，从而实现适配&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export default &amp;#123;
  data() &amp;#123;
    return &amp;#123;&amp;#125;
  &amp;#125;,
  mounted() &amp;#123;
    this.getRem()
    window.addEventListener(&#39;resize&#39;, this.getRem);
    this.$on(&#39;hooK:beforeDestroy&#39;, () =&amp;gt; &amp;#123;
      window.removeEventListener(&#39;resize&#39;, this.getRem);
    &amp;#125;)
  &amp;#125;,
  methods: &amp;#123;
    getRem () &amp;#123;
      const pwidth = 1920 // 设计图大小
      const prem = 1
      const html = document.getElementsByTagName(&#39;html&#39;)[0]
      const oWidth = window.innerWidth || document.body.clientWidth || document.documentElement.clientWidth // 屏幕大小
      html.style.fontSize = (oWidth / pwidth) * prem + &#39;px&#39;
    &amp;#125;
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;缺点：&lt;br /&gt;
大屏使用 rem 耗时，而且对浏览器最小字体不支持&lt;/p&gt;
&lt;h2 id=&#34;scale缩放实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scale缩放实现&#34;&gt;#&lt;/a&gt; scale 缩放实现&lt;/h2&gt;
&lt;p&gt;使用 scale 可以节省百分之九十工作量，但是缺点：&lt;br /&gt;
如果大屏有地图，缩放会导致地图定位有问题，请根据使用场景选择最佳方案&lt;/p&gt;
&lt;p&gt;创建一个组件 SacleBox&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
 &amp;lt;div
    class=&amp;quot;ScaleBox&amp;quot;
    ref=&amp;quot;ScaleBox&amp;quot;
    :style=&amp;quot;&amp;#123;
      width: width + &#39;px&#39;,
      height: height + &#39;px&#39;,
    &amp;#125;&amp;quot;
  &amp;gt;
    &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
 
&amp;lt;script&amp;gt;
export default &amp;#123;
  name: &amp;quot;ScaleBox&amp;quot;,
  data() &amp;#123;
    return &amp;#123;
      width: 1920,
      height: 1080,
    &amp;#125;;
  &amp;#125;,
  mounted() &amp;#123;
    this.setScale();
    window.addEventListener(&#39;resize&#39;, this.debounce(this.setScale));
    this.$on(&#39;hooK:beforeDestroy&#39;, () =&amp;gt; &amp;#123;
      window.removeEventListener(&#39;resize&#39;, this.debounce(this.setScale))
    &amp;#125;)
  &amp;#125;,
  methods: &amp;#123;
    setScale() &amp;#123;
      // 固定好16：9的宽高比，计算出最合适的缩放比
      const &amp;#123; width, height &amp;#125; = this;
      const wh = window.innerHeight / height;
      const ww = window.innerWidth / width;
      const scale = ww &amp;lt; wh ? ww : wh;
      if (this.$refs.ScaleBox) &amp;#123;
        this.$refs.ScaleBox.style.setProperty(&amp;quot;--scale&amp;quot;, scale);
      &amp;#125;
    &amp;#125;,
    debounce(fn, delay) &amp;#123;
      const delays = delay || 500;
      let timer;
      return function () &amp;#123;
        const args = arguments;
        timer &amp;amp;&amp;amp; clearTimeout(timer);
        timer = setTimeout(() =&amp;gt; &amp;#123;
          timer = null;
          fn.apply(this, args);
        &amp;#125;, delays);
      &amp;#125;;
    &amp;#125;,
  &amp;#125;,
&amp;#125;;
&amp;lt;/script&amp;gt;
 
&amp;lt;style lang=&amp;quot;scss&amp;quot;&amp;gt;
.ScaleBox &amp;#123;
  --scale: 1;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: scale(var(--scale)) translate(-50%, -50%);
  transform-origin: 0 0;
  transition: 0.3s;
  z-index: 999;
&amp;#125;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大屏引入 ScaleBox 实现缩放&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;scale-box&amp;gt;
    // 业务代码
  &amp;lt;/scalebox&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import ScaleBox from &#39;@/components/scale-box/index.vue&#39;
export default &amp;#123;
  name: &amp;quot;home&amp;quot;,
  components: &amp;#123; ScaleBox &amp;#125;,
  data () &amp;#123;
    return &amp;#123;

    &amp;#125;;
  &amp;#125;,
&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/tool/</guid>
            <title>办公工具合集</title>
            <link>https://moorelxr.github.io/tool/</link>
            <category term="工具" scheme="https://moorelxr.github.io/tags/%E5%B7%A5%E5%85%B7/" />
            <pubDate>Sat, 11 Feb 2023 18:00:53 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1前端小工具合集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1前端小工具合集&#34;&gt;#&lt;/a&gt; 1. 前端小工具合集&lt;/h1&gt;
&lt;h3 id=&#34;echart-社区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#echart-社区&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt;echart 社区&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NoYXJ0Lm1hamgudG9wLw==&#34;&gt;http://chart.majh.top/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ps: 各种丰富的 echart 图集效果&lt;/p&gt;
&lt;h3 id=&#34;渐变色取色工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#渐变色取色工具&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 渐变色取色工具&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JqLjkxam9pbi5jb20vdGlhb3NlLmh0bWw=&#34;&gt;http://bj.91join.com/tiaose.html&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jc3MuYnFyZGguY29tL2dyYWRpZW50&#34;&gt;https://css.bqrdh.com/gradient&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;box-shadow阴影在线调整&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#box-shadow阴影在线调整&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt;box-shadow 阴影在线调整&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ib3gtc2hhZG93LmRldi8=&#34;&gt;https://box-shadow.dev/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;兼容性查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#兼容性查询&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 兼容性查询&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jYW5pdXNlLmNvbS8=&#34;&gt;https://caniuse.com/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码格式化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码格式化&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 代码格式化&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlYmVhdXRpZnkub3JnLw==&#34;&gt;https://codebeautify.org/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ps: 可以美化和格式化源代码，使其更具易读性，还提供其他附加功能，例如图像转换为 base64 和其他多种功能&lt;/p&gt;
&lt;h1 id=&#34;2办公工具合集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2办公工具合集&#34;&gt;#&lt;/a&gt; 2. 办公工具合集&lt;/h1&gt;
&lt;h3 id=&#34;在线-ps&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在线-ps&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 在线 ps&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wcy5nYW9kaW5nLmNvbS8jLw==&#34;&gt;https://ps.gaoding.com/#/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;文叔叔在线文件传输工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文叔叔在线文件传输工具&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 文叔叔（在线文件传输工具）&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2Vuc2h1c2h1LmNuLw==&#34;&gt;https://www.wenshushu.cn/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ps: 拿着取件码去取你的文件，跟取快递一样&lt;sup&gt; -&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;拷贝兔在线文件传输工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拷贝兔在线文件传输工具&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 拷贝兔（在线文件传输工具）&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcC5hbnlrbmV3LmNvbS8=&#34;&gt;https://cp.anyknew.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ps: 拿着取件码去取你的文件，跟取快递一样&lt;sup&gt; -&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;图片处理工具合集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片处理工具合集&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 图片处理工具合集&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueWFzdW90dS5jb20v&#34;&gt;https://www.yasuotu.com/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;视频转换工具合集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视频转换工具合集&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 视频转换工具合集&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcHAueHVuamllc2hpcGluLmNvbS8=&#34;&gt;https://app.xunjieshipin.com/&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb252ZXJ0aW8uY28vemgvbXA0LW1wMy8=&#34;&gt;https://convertio.co/zh/mp4-mp3/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;文档转换工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文档转换工具&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 文档转换工具&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb252ZXJ0aW8uY28vemgv&#34;&gt;https://convertio.co/zh/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;图片背景移除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片背景移除&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 图片背景移除&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmVtb3ZlLmJnL3po&#34;&gt;https://www.remove.bg/zh&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;免费可定制插图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#免费可定制插图&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 免费可定制插图&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdG9yeXNldC5jb20v&#34;&gt;https://storyset.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ps: 通过 Storyset 我们可以轻松定制、动画化并下载插图，以创建令人难以置信的落地页、应用程序或演示文稿&lt;/p&gt;
&lt;h3 id=&#34;线上办公资源ui-办公资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线上办公资源ui-办公资源&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 线上办公资源：（UI、办公资源）&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9uYXYuc2Fua2tpLmNvbS8jL2luZGV4&#34;&gt;https://nav.sankki.com/#/index&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ai-图像放大器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ai-图像放大器&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt;AI 图像放大器&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWdsYXJnZXIuY29tL3poLXR3&#34;&gt;https://imglarger.com/zh-tw&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ppt-模板免费下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ppt-模板免费下载&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt;ppt 模板免费下载：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuMnBwdC5jb20vcHB0Lmh0bWw=&#34;&gt;https://www.2ppt.com/ppt.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuNTFwcHRtb2Jhbi5jb20vZS9zZWFyY2gvcmVzdWx0Lz9zZWFyY2hpZD0yNzgyMA==&#34;&gt;https://www.51pptmoban.com/e/search/result/?searchid=27820&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;云盘资源搜索平台&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云盘资源搜索平台&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 云盘资源搜索平台&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91cHl1bnNvLmNvbS8=&#34;&gt;https://upyunso.com/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;贵金属价格查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#贵金属价格查询&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 贵金属价格查询&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ocS5zbW0uY24vcHJlY2lvdXMtbWV0YWxz&#34;&gt;https://hq.smm.cn/precious-metals&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;3娱乐网站合集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3娱乐网站合集&#34;&gt;#&lt;/a&gt; 3. 娱乐网站合集&lt;/h1&gt;
&lt;h3 id=&#34;厂长资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#厂长资源&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 厂长资源&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jenp5MDEuY29tLw==&#34;&gt;https://czzy01.com/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;小众技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小众技术&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 小众技术&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueGlhb3pob25namlzaHUuY29tLw==&#34;&gt;https://www.xiaozhongjishu.com/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;百度网盘视频播放倍速&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#百度网盘视频播放倍速&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 百度网盘视频播放倍速&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veW5vdGVzaGFyZS9pbmRleC5odG1sP2lkPTBkYmU5YTYwMDMxOTNjNjg5MjZjODlhZDg4ZDk1NTljJmFtcDt0eXBlPW5vdGUmYW1wO190aW1lPTE3MDYwODQxMTM2MDc=&#34;&gt;https://note.youdao.com/ynoteshare/index.html?id=0dbe9a6003193c68926c89ad88d9559c&amp;amp;type=note&amp;amp;_time=1706084113607&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;4找工作合集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4找工作合集&#34;&gt;#&lt;/a&gt; 4. 找工作合集&lt;/h1&gt;
&lt;h3 id=&#34;知页简历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#知页简历&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt; 知页简历&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpeWVhcHAuY29tLw==&#34;&gt;https://www.zhiyeapp.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;(ps: 提供免费简历模板、在线编辑)&lt;/p&gt;
&lt;h3 id=&#34;ai-简历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ai-简历&#34;&gt;#&lt;/a&gt; &amp;gt;&amp;gt;AI 简历&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2h6aGtlamkuY29tLw==&#34;&gt;https://www.chzhkeji.com/&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/electron-build-error/</guid>
            <title>electron打包错误</title>
            <link>https://moorelxr.github.io/electron-build-error/</link>
            <category term="electron" scheme="https://moorelxr.github.io/tags/electron/" />
            <pubDate>Tue, 11 Oct 2022 18:05:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;electron-打包遇到的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#electron-打包遇到的问题&#34;&gt;#&lt;/a&gt; electron 打包遇到的问题&lt;/h1&gt;
&lt;p&gt;内网，内网，内网！！！内网开发的同学看过来～～～&lt;/p&gt;
&lt;h2 id=&#34;一-网络下载失败&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-网络下载失败&#34;&gt;#&lt;/a&gt; 一、网络下载失败&lt;/h2&gt;
&lt;p&gt;electron 打包过程中，由于网络原因，下载 github 上的包出错，主要有以下包：&lt;/p&gt;
&lt;h3 id=&#34;1electron-v1369-win32-x64zip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1electron-v1369-win32-x64zip&#34;&gt;#&lt;/a&gt; 1.electron-v13.6.9-win32-x64.zip&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;./%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%991.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案&#34;&gt;#&lt;/a&gt; 解决方案：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uL2VsZWN0cm9uL3JlbGVhc2VzL2Rvd25sb2FkL3YxMy42LjkvZWxlY3Ryb24tdjEzLjYuOS13aW4zMi14NjQuemlw&#34;&gt;https://github.com/electron/electron/releases/download/v13.6.9/electron-v13.6.9-win32-x64.zip&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;离线下载 electron-v13.6.9-win32-x64.zip，再放到对应目录下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;windows:C:\Users\Administrator\AppData\Local\electron\Cache
Linux:~/.cache/electron
macOS:~/Library/Caches/electron
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图：&lt;br /&gt;
&lt;img data-src=&#34;./%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B31.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2wincodesign-2607z&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2wincodesign-2607z&#34;&gt;#&lt;/a&gt; 2.winCodeSign-2.6.0.7z&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;./%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%992.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;解决方案-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案-2&#34;&gt;#&lt;/a&gt; 解决方案：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvd2luQ29kZVNpZ24tMi42LjAvd2luQ29kZVNpZ24tMi42LjAuN3o=&#34;&gt;https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.6.0/winCodeSign-2.6.0.7z&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;离线下载 winCodeSign-2.6.0.7z，再放到对应目录下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;windows:C:\Users\Administrator\AppData\Local\electron-builder\Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图：&lt;br /&gt;
&lt;img data-src=&#34;./%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B32.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3nsis-30417z&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3nsis-30417z&#34;&gt;#&lt;/a&gt; 3.nsis-3.0.4.1.7z&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;./%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%993.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;解决方案-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案-3&#34;&gt;#&lt;/a&gt; 解决方案：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvbnNpcy0zLjAuNC4xL25zaXMtMy4wLjQuMS43eg==&#34;&gt;https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;离线下载 nsis-3.0.4.1.7z，再放到对应目录下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;windows:C:\Users\Administrator\AppData\Local\electron-builder\Cache\nsis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图：&lt;br /&gt;
&lt;img data-src=&#34;./%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B33.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;4nsis-resources-3417z&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4nsis-resources-3417z&#34;&gt;#&lt;/a&gt; 4.nsis-resources-3.4.1.7z&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;./%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%994.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;解决方案-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案-4&#34;&gt;#&lt;/a&gt; 解决方案：&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXVzZXJsYW5kL2VsZWN0cm9uLWJ1aWxkZXItYmluYXJpZXMvcmVsZWFzZXMvZG93bmxvYWQvbnNpcy1yZXNvdXJjZXMtMy40LjEvbnNpcy1yZXNvdXJjZXMtMy40LjEuN3o=&#34;&gt;https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;离线下载 nsis-resources-3.4.1.7z，再放到对应目录下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;windows:C:\Users\Administrator\AppData\Local\electron-builder\Cache\nsis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图：&lt;br /&gt;
&lt;img data-src=&#34;./%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B34.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再次打包，成功了！！！&lt;/p&gt;
&lt;h2 id=&#34;二-国产操作系统通信-uos-arm64-版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-国产操作系统通信-uos-arm64-版&#34;&gt;#&lt;/a&gt; 二、国产操作系统（通信 UOS arm64 版）&lt;/h2&gt;
&lt;p&gt;打包流程参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdHV5aWxlMDA2L3AvMTYzOTk3NDUuaHRtbA==&#34;&gt;linux 打包&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-arm64-适配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-arm64-适配&#34;&gt;#&lt;/a&gt; 1. arm64 适配:&lt;/h3&gt;
&lt;p&gt;安装完 node.js、vscode 等必要的开发环境后，在统信 UOS arm64 位下打包 electron 项目依然会报错&lt;br /&gt;
&lt;img data-src=&#34;./linux/arm64.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从报错信息可以看到，electron 在 linux 下使用 fpm 进行打包，然而下载的是 x86 的包，而不是 arm64 架构的包&lt;/p&gt;
&lt;h4 id=&#34;解决方案-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案-5&#34;&gt;#&lt;/a&gt; 解决方案：&lt;/h4&gt;
&lt;p&gt;在 x86 上交叉编译出 arm64 的包，重新打包一下成功了！！！&lt;/p&gt;
&lt;p&gt;内网开发真的太痛苦了 😭😭😭&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/electron-tray/</guid>
            <title>electron系统托盘</title>
            <link>https://moorelxr.github.io/electron-tray/</link>
            <category term="electron" scheme="https://moorelxr.github.io/tags/electron/" />
            <pubDate>Tue, 11 Oct 2022 18:02:35 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;electron-创建系统托盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#electron-创建系统托盘&#34;&gt;#&lt;/a&gt; electron 创建系统托盘&lt;/h1&gt;
&lt;p&gt;主进程（background.js）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; app, BrowserWindow, ipcMain, Tray, Menu, nativeImage &amp;#125; from &#39;electron&#39;

let win
function createWindow() &amp;#123;
  // 创建窗口
  ...
  createTrayIcon()
&amp;#125;

// 创建系统托盘
let tray
function createTrayIcon() &amp;#123;
  const iconPath = nativeImage.createFromPath(path.join(__static, &#39;icons/cloud_client.png&#39;)) // __static指向public文件夹
  tray = new Tray(iconPath)
  const contextMenu = Menu.buildFromTemplate([
    &amp;#123;
      label: &#39;产品介绍&#39;,
      click: () =&amp;gt; &amp;#123;
        dialog.showMessageBoxSync(&amp;#123;
          message: &#39;云应用客户端&#39; + config.version,
          detail: &#39;*******&#39;,
          type: &#39;info&#39;
        &amp;#125;)
      &amp;#125;
    &amp;#125;,
    &amp;#123;
      label: &#39;打开 云应用&#39;,
      click: () =&amp;gt; &amp;#123;
        win.show()
        win.setSkipTaskbar(false) // 显示任务栏图标
      &amp;#125;
    &amp;#125;,
    &amp;#123;
      label: &#39;退出 云应用&#39;,
      click: () =&amp;gt; &amp;#123;
        win.setSkipTaskbar(true) // 隐藏任务栏图标
        win.destroy()
        app.quit()
      &amp;#125;
    &amp;#125;
  ])
  tray.setToolTip(&#39;云应用&#39;)
  tray.setContextMenu(contextMenu)
  tray.on(&#39;click&#39;, () =&amp;gt; &amp;#123;
    win.show()
    win.setSkipTaskbar(false)
  &amp;#125;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;./preview.png&#34; alt=&#34;App Screenshot&#34; /&gt;&lt;/p&gt;
&lt;p&gt;🤔 其他参数请移步&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvemgvZG9jcy9sYXRlc3QvYXBpL3RyYXk=&#34;&gt;官网&lt;/span&gt;查看详细信息&lt;/p&gt;
&lt;p&gt;💬 有问题欢迎指出...&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/electron-process-communicate/</guid>
            <title>electron进程通信</title>
            <link>https://moorelxr.github.io/electron-process-communicate/</link>
            <category term="electron" scheme="https://moorelxr.github.io/tags/electron/" />
            <pubDate>Tue, 11 Oct 2022 18:00:53 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;electron-进程间通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#electron-进程间通信&#34;&gt;#&lt;/a&gt; electron 进程间通信&lt;/h1&gt;
&lt;h2 id=&#34;electron-为我们提供了-2-个-ipc进程间通信模块称为ipcmain和ipcrender&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#electron-为我们提供了-2-个-ipc进程间通信模块称为ipcmain和ipcrender&#34;&gt;#&lt;/a&gt; electron 为我们提供了 2 个 IPC (进程间通信) 模块，称为 &lt;code&gt;ipcMain&lt;/code&gt;  和 &lt;code&gt;ipcRender&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;ipcMain：主进程向渲染进程的异步通信&lt;/p&gt;
&lt;p&gt;ipcRenderer：渲染进程向主进程发送消息&lt;/p&gt;
&lt;h2 id=&#34;示例-1渲染进程向主进程发送消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-1渲染进程向主进程发送消息&#34;&gt;#&lt;/a&gt; 示例 1：渲染进程向主进程发送消息&lt;/h2&gt;
&lt;p&gt;渲染进程发消息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; ipcRenderer &amp;#125; from &#39;electron&#39;
export default&amp;#123;
  methods: &amp;#123;
    minimizeWin() &amp;#123;
      ipcRenderer.send(&#39;window-min&#39;)
    &amp;#125;
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主进程（background.js）接收消息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; app, BrowserWindow, ipcMain &amp;#125; from &#39;electron&#39;

// 主进程接收消息
ipcMain.on(&#39;window-min&#39;, () =&amp;gt; &amp;#123;
  win.minimize()
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;示例-2主进程向渲染进程发送消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-2主进程向渲染进程发送消息&#34;&gt;#&lt;/a&gt; 示例 2：主进程向渲染进程发送消息&lt;/h2&gt;
&lt;p&gt;主进程（background.js）发送消息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; app, BrowserWindow, ipcMain &amp;#125; from &#39;electron&#39;

ipcMain.on(&#39;window-destroy&#39;, () =&amp;gt; &amp;#123;
  // 主进程发送消息
  win.webContents.send(&#39;window-destroy&#39;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;渲染进程接收消息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; ipcRenderer &amp;#125; from &#39;electron&#39;
export default&amp;#123;
  mounted() &amp;#123;
    ipcRenderer.on(&#39;window-destroy&#39;, (event, data) =&amp;gt; &amp;#123;
      // do something
    &amp;#125;)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;示例-3双向通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例-3双向通信&#34;&gt;#&lt;/a&gt; 示例 3：双向通信&lt;/h2&gt;
&lt;p&gt;渲染进程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; ipcRenderer &amp;#125; from &#39;electron&#39;
export default&amp;#123;
  data() &amp;#123;
    return &amp;#123;
      mountPath: &#39;&#39;
    &amp;#125;
  &amp;#125;,
  methods: &amp;#123;
    openFilePicker() &amp;#123;
      // 向主进程发送消息
      ipcRenderer.send(&#39;openfile&#39;)
      // 接收主进程的消息
      ipcRenderer.once(&#39;openfile&#39;, (event, data) =&amp;gt; &amp;#123;
        // do some thing
      &amp;#125;)
    &amp;#125;
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主进程（background.js）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; app, BrowserWindow, ipcMain, dialog &amp;#125; from &#39;electron&#39;
const os = require(&#39;os&#39;)

// 接收渲染进程的消息
ipcMain.on(&#39;openfile&#39;, (event) =&amp;gt; &amp;#123;
  dialog.showOpenDialog(&amp;#123;
    defaultPath: os.homedir(),
    properties: [&#39;openDirectory&#39;]
  &amp;#125;).then(res =&amp;gt; &amp;#123;
    event.sender.send(&#39;openfile&#39;, res.filePaths) // 向渲染进程发消息
  &amp;#125;).catch(err =&amp;gt; &amp;#123;
    console.log(err)
  &amp;#125;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上就是进程通信的所有内容，🤔 有问题欢迎指出...&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://moorelxr.github.io/electron-introduce/</guid>
            <title>eletron介绍</title>
            <link>https://moorelxr.github.io/electron-introduce/</link>
            <category term="electron" scheme="https://moorelxr.github.io/tags/electron/" />
            <pubDate>Sun, 11 Sep 2022 22:03:14 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-electron-介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-electron-介绍&#34;&gt;#&lt;/a&gt; 一、electron 介绍&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;官网 (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcv&#34;&gt;https://www.electronjs.org/&lt;/span&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序，通过将 Chromium 和 Node.js 合并到同一个运行环境中，兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./1.png&#34; alt=&#34;App Screenshot&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-优势&#34;&gt;#&lt;/a&gt; 二、优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大大降低了开发桌面应用的门槛&lt;/li&gt;
&lt;li&gt;跨平台 可以打包成 Mac、Windows 和 Linux 三个平台的应用程序&lt;/li&gt;
&lt;li&gt;Chromium 作为内核，无需考虑兼容性，一套代码兼容多个平台&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三-需要用到的前端技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-需要用到的前端技术&#34;&gt;#&lt;/a&gt; 三、需要用到的前端技术&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Html、CSS、JavaScript、ES6&lt;/li&gt;
&lt;li&gt;前端开发工具 Vue、Angular、React 等的一种&lt;/li&gt;
&lt;li&gt;进阶使用可能还需要 node.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四-项目搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-项目搭建&#34;&gt;#&lt;/a&gt; 四、项目搭建&lt;/h2&gt;
&lt;p&gt;1. 使用 vue-cli 创建 vue 项目&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vue create electron-test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2. 安装插件 vue-cli-plugin-electron-builder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vue add electron-builder
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完项目结构新增了以下内容：&lt;br /&gt;
&lt;img data-src=&#34;./2.jpg&#34; alt=&#34;App Screenshot&#34; /&gt;&lt;br /&gt;
 其中 background.js 为 electron 主进程相关操作&lt;/p&gt;
&lt;p&gt;五、自定义打包命令&lt;br /&gt;
 package.json 新增以下打包命令，文档参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZWxlY3Ryb24uYnVpbGQvY2xp&#34;&gt;https://www.electron.build/cli&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;electron:build-linux-arm64&amp;quot;: &amp;quot;vue-cli-service electron:build --linux --arm64 -p never&amp;quot;,
&amp;quot;electron:build-linux-x64&amp;quot;: &amp;quot;vue-cli-service electron:build --linux --x64 -p never&amp;quot;,
&amp;quot;electron:build-win64&amp;quot;: &amp;quot;vue-cli-service electron:build --win --x64 -p never&amp;quot;,
&amp;quot;electron:build-win32&amp;quot;: &amp;quot;vue-cli-service electron:build --win --ia32 -p never&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：linux 安装包需要在 linux 系统上编译，另外 linux arm64 系统的安装包在 arm64 上编译会报错，需要在 linux x64 上交叉编译&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
